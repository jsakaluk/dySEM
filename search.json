[{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported John (responsible enforcement) using uwo email. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jsakaluk.github.io/dySEM/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jsakaluk.github.io/dySEM/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2023 John K. Sakaluk  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. dySEM Copyright (C) 2023 John K. Sakaluk This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"tldr","dir":"Articles","previous_headings":"","what":"tl;dr:","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"Latent Actor-Partner Interdependence Models (APIMs) way specify common APIM model commandeering benefits latent variables. Namely: accounting measurement error assessments X Y partners, ; statistical framework (SEM) allows interrogate auxiliary assumptions underlie model comparisons within wish make specifics benefits (.e., degree help/hinder, methodological circumstances) using Latent APIM vs. approaches well known, current target study Eric Tu’s comps paper. research ongoing, vignette serve reasonable starting tutorial wishing experiment applying latent APIMs.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"the-observed-apim-vs--latent-apim-in-sem","dir":"Articles","previous_headings":"","what":"The Observed APIM vs. Latent APIM in SEM","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"informal poll RRIG facebook group illustrates, SEM clearly go-analytic framework dyadic data analysis (hope encourage usage SEM). Furthermore, even people describe using SEM dyadic data analysis, usually mean specify models latent variables (.e., way derive available benefits SEM framework). Specifically, SEM-users dyadic data analysis –model like APIM–first create average sum scores given measures interest (e.g., X Y), use composite scores structural equation modeling software specify model looks something like :  Although technically true structural equation model, ’s fairly basic one essentially multivariate path analysis model. can fine, certain purposes, structural equation model specified full measurement models latent variables evaluation. therefore call model “observed APIM” modeled fully observed (.e., non-latent) composite variables. latent APIM, fully specified measurement model measure analyzed, look something like :","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"example-data-and-scraping-variable-names","dir":"Articles","previous_headings":"Fitting The Latent APIM with dySEM","what":"Example Data and Scraping Variable Names","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"example dataset using contains items assessing relationship satisfaction commitment (five items , partners). use dySEM, begin scraping variables attempting model. first need identify repetitious “naming pattern” applied satisfaction items (see ()[https://jsakaluk.github.io/dySEM/articles/varnames.html] need refresher ). see items correspond “Stem” (e.g., sat.g), “Partner” (“1” “2”), “Item number” (1-5) “spi” ordering, “.” used separate stem partner, “_” used separate partner item number. assign object (arbitrarily) called “dvn” (think list capturing information (d)yad (v)ariable (n)ames): can visually confirm list contains: $p1xvarnames: five variable names Partner 1’s satisfaction item responses $p2xvarnames: five variable names Partner 2’s satisfaction item responses $xindper: number items Latent X (case, Satisfaction) partner $dist1: distinguishing character first partner $dist2: distinguishing character second partner $p1yvarnames: five variable names Partner 1’s commitment item responses $p2yvarnames: five variable names Partner 2’s commitment item responses $yindper: number items Latent Y (case, Commitment) partner $indnum: total number items SEM model scripted pieces information needed dySEM automate scripting latent APIMs (well latent dyadic models like CFM MIM) variety specification options.","code":"library(dySEM) library(lavaan) library(semPlot)  dat <- commitmentQ names(dat) #>  [1] \"sat.g.1_1\" \"sat.g.1_2\" \"sat.g.1_3\" \"sat.g.1_4\" \"sat.g.1_5\" \"com.1_1\"   #>  [7] \"com.1_2\"   \"com.1_3\"   \"com.1_4\"   \"com.1_5\"   \"sat.g.2_1\" \"sat.g.2_2\" #> [13] \"sat.g.2_3\" \"sat.g.2_4\" \"sat.g.2_5\" \"com.2_1\"   \"com.2_2\"   \"com.2_3\"   #> [19] \"com.2_4\"   \"com.2_5\" dvn <- scrapeVarCross(dat = commitmentQ, #data set to scrape from                         #var name patterns for X indicators                         x_order = \"spi\", x_stem = \"sat.g\",  x_delim1 = \".\", x_delim2=\"_\",                         #var name patterns for Y indicators                         y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\",                         #character used to distinguish between names for P1 and P2                         distinguish_1=\"1\", distinguish_2=\"2\") dvn #> $p1xvarnames #> [1] \"sat.g.1_1\" \"sat.g.1_2\" \"sat.g.1_3\" \"sat.g.1_4\" \"sat.g.1_5\" #>  #> $p2xvarnames #> [1] \"sat.g.2_1\" \"sat.g.2_2\" \"sat.g.2_3\" \"sat.g.2_4\" \"sat.g.2_5\" #>  #> $xindper #> [1] 5 #>  #> $dist1 #> [1] \"1\" #>  #> $dist2 #> [1] \"2\" #>  #> $p1yvarnames #> [1] \"com.1_1\" \"com.1_2\" \"com.1_3\" \"com.1_4\" \"com.1_5\" #>  #> $p2yvarnames #> [1] \"com.2_1\" \"com.2_2\" \"com.2_3\" \"com.2_4\" \"com.2_5\" #>  #> $yindper #> [1] 5 #>  #> $indnum #> [1] 20"},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"example-analysis","dir":"Articles","previous_headings":"Fitting The Latent APIM with dySEM","what":"Example Analysis","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"dySEM makes rest process fitting latent APIMs straightforward. first need use dySEM scripter functions generate correct code lavaan fit latent APIM.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"model-scripting","dir":"Articles","previous_headings":"Fitting The Latent APIM with dySEM > Example Analysis","what":"Model Scripting","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"return output scriptAPIM(), doesn’t look particularly nice: Rest assured, lavaan can make sense applesauce; required text , light touch concatenate function (parse line-breaks text script), can see friendly human-readable version scriptAPIM() generated: can now immediately pass models lavaan fitting.","code":"apim.script.config <-  scriptAPIM(dvn, #the list we just created from scrapeVarCross                                   lvxname = \"Sat\", #arbitrary name for LV X                                   lvyname = \"Com\", #arbitrary name for LV Y                                   constr_dy_x_meas = \"none\", #configurally invariant latent x                                   constr_dy_y_meas = \"none\",#configurally invariant latent y                                   constr_dy_x_struct =  \"none\", #no structural constraints for latent x                                   constr_dy_y_struct = \"none\", #no structural constraints for latent y                                   constr_dy_xy_struct = \"none\", #no constrained actor and/or partner effects                                   est_k = TRUE,#want k-parameter? (optional, but nice)                                   writeTo = tempdir(), fileName = \"APIM_script_config\") #want script saved to directory? (e.g., for OSF?) #> [1] \"#Measurement Model\\n\\n#Loadings\\nSat1=~NA*sat.g.1_1+sat.g.1_2+sat.g.1_3+sat.g.1_4+sat.g.1_5\\nSat2=~NA*sat.g.2_1+sat.g.2_2+sat.g.2_3+sat.g.2_4+sat.g.2_5\\n\\nCom1=~NA*com.1_1+com.1_2+com.1_3+com.1_4+com.1_5\\nCom2=~NA*com.2_1+com.2_2+com.2_3+com.2_4+com.2_5\\n\\n#Intercepts\\nsat.g.1_1 ~ 1\\nsat.g.1_2 ~ 1\\nsat.g.1_3 ~ 1\\nsat.g.1_4 ~ 1\\nsat.g.1_5 ~ 1\\n\\nsat.g.2_1 ~ 1\\nsat.g.2_2 ~ 1\\nsat.g.2_3 ~ 1\\nsat.g.2_4 ~ 1\\nsat.g.2_5 ~ 1\\n\\ncom.1_1 ~ 1\\ncom.1_2 ~ 1\\ncom.1_3 ~ 1\\ncom.1_4 ~ 1\\ncom.1_5 ~ 1\\n\\ncom.2_1 ~ 1\\ncom.2_2 ~ 1\\ncom.2_3 ~ 1\\ncom.2_4 ~ 1\\ncom.2_5 ~ 1\\n\\n#Residual Variances\\nsat.g.1_1 ~~ sat.g.1_1\\nsat.g.1_2 ~~ sat.g.1_2\\nsat.g.1_3 ~~ sat.g.1_3\\nsat.g.1_4 ~~ sat.g.1_4\\nsat.g.1_5 ~~ sat.g.1_5\\n\\nsat.g.2_1 ~~ sat.g.2_1\\nsat.g.2_2 ~~ sat.g.2_2\\nsat.g.2_3 ~~ sat.g.2_3\\nsat.g.2_4 ~~ sat.g.2_4\\nsat.g.2_5 ~~ sat.g.2_5\\n\\ncom.1_1 ~~ com.1_1\\ncom.1_2 ~~ com.1_2\\ncom.1_3 ~~ com.1_3\\ncom.1_4 ~~ com.1_4\\ncom.1_5 ~~ com.1_5\\n\\ncom.2_1 ~~ com.2_1\\ncom.2_2 ~~ com.2_2\\ncom.2_3 ~~ com.2_3\\ncom.2_4 ~~ com.2_4\\ncom.2_5 ~~ com.2_5\\n\\n#Residual Covariances\\nsat.g.1_1 ~~ sat.g.2_1\\nsat.g.1_2 ~~ sat.g.2_2\\nsat.g.1_3 ~~ sat.g.2_3\\nsat.g.1_4 ~~ sat.g.2_4\\nsat.g.1_5 ~~ sat.g.2_5\\n\\ncom.1_1 ~~ com.2_1\\ncom.1_2 ~~ com.2_2\\ncom.1_3 ~~ com.2_3\\ncom.1_4 ~~ com.2_4\\ncom.1_5 ~~ com.2_5\\n\\n#Structural Model\\n\\n#Latent (Co)Variances\\nSat1 ~~ 1*Sat1\\nSat2 ~~ 1*Sat2\\nSat1 ~~ Sat2\\n\\nCom1 ~~ 1*Com1\\nCom2 ~~ 1*Com2\\nCom1 ~~ Com2\\n\\n#Latent Means\\nSat1 ~ 0*1\\nSat2 ~ 0*1\\n\\nCom1 ~ 0*1\\nCom2 ~ 0*1\\n\\n#Latent Actor Effects\\nCom1 ~ a1*Sat1\\nCom2 ~ a2*Sat2\\n\\n#Latent Partner Effects\\nCom1 ~ p1*Sat2\\nCom2 ~ p2*Sat1\\n\\n#k Parameter\\nk1 := p1/a1\\nk2 := p2/a2\" cat(apim.script.config) #> #Measurement Model #>  #> #Loadings #> Sat1=~NA*sat.g.1_1+sat.g.1_2+sat.g.1_3+sat.g.1_4+sat.g.1_5 #> Sat2=~NA*sat.g.2_1+sat.g.2_2+sat.g.2_3+sat.g.2_4+sat.g.2_5 #>  #> Com1=~NA*com.1_1+com.1_2+com.1_3+com.1_4+com.1_5 #> Com2=~NA*com.2_1+com.2_2+com.2_3+com.2_4+com.2_5 #>  #> #Intercepts #> sat.g.1_1 ~ 1 #> sat.g.1_2 ~ 1 #> sat.g.1_3 ~ 1 #> sat.g.1_4 ~ 1 #> sat.g.1_5 ~ 1 #>  #> sat.g.2_1 ~ 1 #> sat.g.2_2 ~ 1 #> sat.g.2_3 ~ 1 #> sat.g.2_4 ~ 1 #> sat.g.2_5 ~ 1 #>  #> com.1_1 ~ 1 #> com.1_2 ~ 1 #> com.1_3 ~ 1 #> com.1_4 ~ 1 #> com.1_5 ~ 1 #>  #> com.2_1 ~ 1 #> com.2_2 ~ 1 #> com.2_3 ~ 1 #> com.2_4 ~ 1 #> com.2_5 ~ 1 #>  #> #Residual Variances #> sat.g.1_1 ~~ sat.g.1_1 #> sat.g.1_2 ~~ sat.g.1_2 #> sat.g.1_3 ~~ sat.g.1_3 #> sat.g.1_4 ~~ sat.g.1_4 #> sat.g.1_5 ~~ sat.g.1_5 #>  #> sat.g.2_1 ~~ sat.g.2_1 #> sat.g.2_2 ~~ sat.g.2_2 #> sat.g.2_3 ~~ sat.g.2_3 #> sat.g.2_4 ~~ sat.g.2_4 #> sat.g.2_5 ~~ sat.g.2_5 #>  #> com.1_1 ~~ com.1_1 #> com.1_2 ~~ com.1_2 #> com.1_3 ~~ com.1_3 #> com.1_4 ~~ com.1_4 #> com.1_5 ~~ com.1_5 #>  #> com.2_1 ~~ com.2_1 #> com.2_2 ~~ com.2_2 #> com.2_3 ~~ com.2_3 #> com.2_4 ~~ com.2_4 #> com.2_5 ~~ com.2_5 #>  #> #Residual Covariances #> sat.g.1_1 ~~ sat.g.2_1 #> sat.g.1_2 ~~ sat.g.2_2 #> sat.g.1_3 ~~ sat.g.2_3 #> sat.g.1_4 ~~ sat.g.2_4 #> sat.g.1_5 ~~ sat.g.2_5 #>  #> com.1_1 ~~ com.2_1 #> com.1_2 ~~ com.2_2 #> com.1_3 ~~ com.2_3 #> com.1_4 ~~ com.2_4 #> com.1_5 ~~ com.2_5 #>  #> #Structural Model #>  #> #Latent (Co)Variances #> Sat1 ~~ 1*Sat1 #> Sat2 ~~ 1*Sat2 #> Sat1 ~~ Sat2 #>  #> Com1 ~~ 1*Com1 #> Com2 ~~ 1*Com2 #> Com1 ~~ Com2 #>  #> #Latent Means #> Sat1 ~ 0*1 #> Sat2 ~ 0*1 #>  #> Com1 ~ 0*1 #> Com2 ~ 0*1 #>  #> #Latent Actor Effects #> Com1 ~ a1*Sat1 #> Com2 ~ a2*Sat2 #>  #> #Latent Partner Effects #> Com1 ~ p1*Sat2 #> Com2 ~ p2*Sat1 #>  #> #k Parameter #> k1 := p1/a1 #> k2 := p2/a2"},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"model-fitting","dir":"Articles","previous_headings":"Fitting The Latent APIM with dySEM > Example Analysis","what":"Model Fitting","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"","code":"apim.fit.config <- cfa(apim.script.config,                                 data = commitmentQ,                                std.lv = FALSE,                                 auto.fix.first= FALSE,                                 meanstructure = TRUE)"},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"inspecting-output","dir":"Articles","previous_headings":"Fitting The Latent APIM with dySEM","what":"Inspecting Output","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"evaluate focal lavaan output","code":"summary(apim.fit.config,          standardized = TRUE,         fit.measures = TRUE,          rsquare = TRUE) #> lavaan 0.6-19 ended normally after 63 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        76 #>  #>                                                   Used       Total #>   Number of observations                           110         118 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               339.833 #>   Degrees of freedom                               154 #>   P-value (Chi-square)                           0.000 #>  #> Model Test Baseline Model: #>  #>   Test statistic                              2207.988 #>   Degrees of freedom                               190 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    0.908 #>   Tucker-Lewis Index (TLI)                       0.886 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)              -3992.007 #>   Loglikelihood unrestricted model (H1)      -3822.090 #>                                                        #>   Akaike (AIC)                                8136.013 #>   Bayesian (BIC)                              8341.250 #>   Sample-size adjusted Bayesian (SABIC)       8101.087 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.105 #>   90 Percent confidence interval - lower         0.090 #>   90 Percent confidence interval - upper         0.120 #>   P-value H_0: RMSEA <= 0.050                    0.000 #>   P-value H_0: RMSEA >= 0.080                    0.996 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.076 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   Sat1 =~                                                                #>     sat.g.1_1         2.109    0.161   13.059    0.000    2.109    0.938 #>     sat.g.1_2         1.879    0.169   11.095    0.000    1.879    0.849 #>     sat.g.1_3         2.105    0.165   12.739    0.000    2.105    0.925 #>     sat.g.1_4         1.947    0.166   11.707    0.000    1.947    0.881 #>     sat.g.1_5         1.863    0.184   10.104    0.000    1.863    0.801 #>   Sat2 =~                                                                #>     sat.g.2_1         1.847    0.149   12.412    0.000    1.847    0.911 #>     sat.g.2_2         1.850    0.149   12.457    0.000    1.850    0.911 #>     sat.g.2_3         1.858    0.149   12.470    0.000    1.858    0.913 #>     sat.g.2_4         1.604    0.154   10.430    0.000    1.604    0.819 #>     sat.g.2_5         1.918    0.161   11.934    0.000    1.918    0.890 #>   Com1 =~                                                                #>     com.1_1           1.258    0.112   11.207    0.000    1.770    0.923 #>     com.1_2           1.113    0.132    8.429    0.000    1.566    0.737 #>     com.1_3          -0.084    0.208   -0.402    0.688   -0.118   -0.039 #>     com.1_4          -0.191    0.205   -0.932    0.351   -0.268   -0.086 #>     com.1_5           1.258    0.115   10.912    0.000    1.770    0.898 #>   Com2 =~                                                                #>     com.2_1           1.541    0.130   11.842    0.000    2.017    0.919 #>     com.2_2           1.460    0.120   12.200    0.000    1.910    0.938 #>     com.2_3           0.422    0.221    1.912    0.056    0.552    0.180 #>     com.2_4          -0.016    0.212   -0.077    0.939   -0.021   -0.007 #>     com.2_5           1.477    0.125   11.833    0.000    1.932    0.920 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   Com1 ~                                                                 #>     Sat1      (a1)    0.227    0.178    1.276    0.202    0.161    0.161 #>   Com2 ~                                                                 #>     Sat2      (a2)    0.921    0.200    4.598    0.000    0.704    0.704 #>   Com1 ~                                                                 #>     Sat2      (p1)    0.805    0.199    4.044    0.000    0.572    0.572 #>   Com2 ~                                                                 #>     Sat1      (p2)   -0.104    0.173   -0.603    0.547   -0.080   -0.080 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>  .sat.g.1_1 ~~                                                           #>    .sat.g.2_1        -0.201    0.086   -2.343    0.019   -0.201   -0.308 #>  .sat.g.1_2 ~~                                                           #>    .sat.g.2_2         0.344    0.115    2.994    0.003    0.344    0.351 #>  .sat.g.1_3 ~~                                                           #>    .sat.g.2_3        -0.181    0.090   -2.015    0.044   -0.181   -0.254 #>  .sat.g.1_4 ~~                                                           #>    .sat.g.2_4         0.134    0.127    1.059    0.290    0.134    0.114 #>  .sat.g.1_5 ~~                                                           #>    .sat.g.2_5         0.267    0.149    1.790    0.073    0.267    0.195 #>  .com.1_1 ~~                                                             #>    .com.2_1          -0.183    0.098   -1.862    0.063   -0.183   -0.287 #>  .com.1_2 ~~                                                             #>    .com.2_2          -0.181    0.129   -1.404    0.160   -0.181   -0.178 #>  .com.1_3 ~~                                                             #>    .com.2_3           3.152    0.932    3.380    0.001    3.152    0.341 #>  .com.1_4 ~~                                                             #>    .com.2_4           4.386    0.989    4.434    0.000    4.386    0.467 #>  .com.1_5 ~~                                                             #>    .com.2_5          -0.029    0.098   -0.298    0.766   -0.029   -0.041 #>   Sat1 ~~                                                                #>     Sat2              0.766    0.044   17.320    0.000    0.766    0.766 #>  .Com1 ~~                                                                #>    .Com2              0.385    0.098    3.947    0.000    0.385    0.385 #>  #> Intercepts: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .sat.g.1_1         6.609    0.214   30.830    0.000    6.609    2.939 #>    .sat.g.1_2         6.591    0.211   31.229    0.000    6.591    2.978 #>    .sat.g.1_3         6.391    0.217   29.452    0.000    6.391    2.808 #>    .sat.g.1_4         6.673    0.211   31.674    0.000    6.673    3.020 #>    .sat.g.1_5         6.445    0.222   29.082    0.000    6.445    2.773 #>    .sat.g.2_1         6.918    0.193   35.775    0.000    6.918    3.411 #>    .sat.g.2_2         6.927    0.194   35.780    0.000    6.927    3.411 #>    .sat.g.2_3         6.727    0.194   34.679    0.000    6.727    3.307 #>    .sat.g.2_4         7.155    0.187   38.325    0.000    7.155    3.654 #>    .sat.g.2_5         6.864    0.205   33.410    0.000    6.864    3.186 #>    .com.1_1           7.527    0.183   41.154    0.000    7.527    3.924 #>    .com.1_2           7.236    0.203   35.699    0.000    7.236    3.404 #>    .com.1_3           4.809    0.292   16.478    0.000    4.809    1.571 #>    .com.1_4           4.300    0.297   14.489    0.000    4.300    1.381 #>    .com.1_5           7.282    0.188   38.760    0.000    7.282    3.696 #>    .com.2_1           7.327    0.209   35.025    0.000    7.327    3.339 #>    .com.2_2           7.345    0.194   37.831    0.000    7.345    3.607 #>    .com.2_3           5.118    0.293   17.461    0.000    5.118    1.665 #>    .com.2_4           4.136    0.289   14.315    0.000    4.136    1.365 #>    .com.2_5           7.191    0.200   35.895    0.000    7.191    3.422 #>     Sat1              0.000                               0.000    0.000 #>     Sat2              0.000                               0.000    0.000 #>    .Com1              0.000                               0.000    0.000 #>    .Com2              0.000                               0.000    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .sat.g.1_1         0.609    0.123    4.954    0.000    0.609    0.120 #>    .sat.g.1_2         1.368    0.207    6.596    0.000    1.368    0.279 #>    .sat.g.1_3         0.747    0.137    5.435    0.000    0.747    0.144 #>    .sat.g.1_4         1.092    0.173    6.320    0.000    1.092    0.224 #>    .sat.g.1_5         1.934    0.282    6.858    0.000    1.934    0.358 #>    .sat.g.2_1         0.702    0.120    5.865    0.000    0.702    0.171 #>    .sat.g.2_2         0.701    0.119    5.875    0.000    0.701    0.170 #>    .sat.g.2_3         0.686    0.118    5.827    0.000    0.686    0.166 #>    .sat.g.2_4         1.261    0.186    6.798    0.000    1.261    0.329 #>    .sat.g.2_5         0.963    0.154    6.241    0.000    0.963    0.207 #>    .com.1_1           0.547    0.152    3.587    0.000    0.547    0.149 #>    .com.1_2           2.067    0.309    6.701    0.000    2.067    0.457 #>    .com.1_3           9.355    1.262    7.415    0.000    9.355    0.999 #>    .com.1_4           9.617    1.297    7.412    0.000    9.617    0.993 #>    .com.1_5           0.750    0.167    4.482    0.000    0.750    0.193 #>    .com.2_1           0.748    0.145    5.159    0.000    0.748    0.155 #>    .com.2_2           0.499    0.113    4.410    0.000    0.499    0.120 #>    .com.2_3           9.146    1.235    7.404    0.000    9.146    0.968 #>    .com.2_4           9.184    1.238    7.416    0.000    9.184    1.000 #>    .com.2_5           0.681    0.131    5.185    0.000    0.681    0.154 #>     Sat1              1.000                               1.000    1.000 #>     Sat2              1.000                               1.000    1.000 #>    .Com1              1.000                               0.505    0.505 #>    .Com2              1.000                               0.584    0.584 #>  #> R-Square: #>                    Estimate #>     sat.g.1_1         0.880 #>     sat.g.1_2         0.721 #>     sat.g.1_3         0.856 #>     sat.g.1_4         0.776 #>     sat.g.1_5         0.642 #>     sat.g.2_1         0.829 #>     sat.g.2_2         0.830 #>     sat.g.2_3         0.834 #>     sat.g.2_4         0.671 #>     sat.g.2_5         0.793 #>     com.1_1           0.851 #>     com.1_2           0.543 #>     com.1_3           0.001 #>     com.1_4           0.007 #>     com.1_5           0.807 #>     com.2_1           0.845 #>     com.2_2           0.880 #>     com.2_3           0.032 #>     com.2_4           0.000 #>     com.2_5           0.846 #>     Com1              0.495 #>     Com2              0.416 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>     k1                3.545    3.423    1.036    0.300    3.545    3.545 #>     k2               -0.113    0.170   -0.664    0.507   -0.113   -0.113 semPaths(apim.fit.config, \"std\")"},{"path":"https://jsakaluk.github.io/dySEM/articles/apim.html","id":"example-of-more-specialized-models-and-cautions","dir":"Articles","previous_headings":"Fitting The Latent APIM with dySEM","what":"Example of More Specialized Models (and Cautions)","title":"The Latent Actor-Partner Interdependence Model: Rationale, Empirical Trade-offs, and Analytic Resources","text":"scriptAPIM() also enables users impose constraints “structural indistinguishability” (e.g., estimating one actor /partner effect partners). However, statistical conclusion validity comparing models kinds constraints models actor /partner effects freely estimated (previous version) depends, part, ensured dyadic measurement invariance, particularly loadings (comparisons require forms invariance met). scriptAPIM() allow script models imposing structural constraints (via equate = argument), regardless level measurement invariance imposed () (via constr_dy_xy_struct = argument). One can therefore impose corresponding level invariance via constr_dy_x_meas = constr_dy_y_meas = arguments (minimum \"loadings\" required, models even constrained, e.g., c(\"loadings\", \"intercepts\",  \"residuals\") also acceptable). Users note structural constraints downstream impacts computation parameter k requested (k = TRUE). , two k’s returned either actor /partner effects uniquely estimated, one k returned actor partner effects constrained equivalency (example ).","code":"apim.script.config.actpart <-  scriptAPIM(dvn, #the list we just created from scrapeVarCross                                   lvxname = \"Sat\", #arbitrary name for LV X                                   lvyname = \"Com\", #arbitrary name for LV Y                                   constr_dy_x_meas = \"none\", #configurally invariant latent x                                   constr_dy_y_meas = \"none\",#configurally invariant latent y                                   constr_dy_x_struct =  \"none\", #no structural constraints for latent x                                   constr_dy_y_struct = \"none\", #no structural constraints for latent y                                   constr_dy_xy_struct = c(\"actors\", \"partners\"), # constrained actor and/or partner effects                                   est_k = TRUE,#want k-parameter? (optional, but nice)                                   writeTo = tempdir(), fileName = \"APIM_script_config\") #want script saved to directory? (e.g., for OSF?) apim.script.loads.actpart <-  scriptAPIM(dvn, #the list we just created from scrapeVarCross                                   lvxname = \"Sat\", #arbitrary name for LV X                                   lvyname = \"Com\", #arbitrary name for LV Y                                   constr_dy_x_meas = \"loadings\", #configurally invariant latent x                                   constr_dy_y_meas = \"loadings\",#configurally invariant latent y                                   constr_dy_x_struct =  \"none\", #no structural constraints for latent x                                   constr_dy_y_struct = \"none\", #no structural constraints for latent y                                   constr_dy_xy_struct = c(\"actors\", \"partners\"), # constrained actor and/or partner effects                                   est_k = TRUE,#want k-parameter? (optional, but nice)                                   writeTo = tempdir(), fileName = \"APIM_script_loading\") #want script saved to directory? (e.g., for OSF?)  apim.fit.loads.eq.all <- cfa(apim.script.loads.actpart,                                 data = commitmentQ,                                std.lv = FALSE,                                 auto.fix.first= FALSE,                                 meanstructure = TRUE)  summary(apim.fit.loads.eq.all,          standardized = TRUE,         fit.measures = TRUE,          rsquare = TRUE) #> lavaan 0.6-19 ended normally after 63 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        78 #>   Number of equality constraints                    12 #>  #>                                                   Used       Total #>   Number of observations                           110         118 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               359.838 #>   Degrees of freedom                               164 #>   P-value (Chi-square)                           0.000 #>  #> Model Test Baseline Model: #>  #>   Test statistic                              2207.988 #>   Degrees of freedom                               190 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    0.903 #>   Tucker-Lewis Index (TLI)                       0.888 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)              -4002.009 #>   Loglikelihood unrestricted model (H1)      -3822.090 #>                                                        #>   Akaike (AIC)                                8136.018 #>   Bayesian (BIC)                              8314.250 #>   Sample-size adjusted Bayesian (SABIC)       8105.687 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.104 #>   90 Percent confidence interval - lower         0.090 #>   90 Percent confidence interval - upper         0.119 #>   P-value H_0: RMSEA <= 0.050                    0.000 #>   P-value H_0: RMSEA >= 0.080                    0.996 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.089 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   Sat1 =~                                                                #>     st.g.1_1 (lx1)    2.061    0.151   13.683    0.000    2.061    0.935 #>     st.g.1_2 (lx2)    1.964    0.159   12.375    0.000    1.964    0.862 #>     st.g.1_3 (lx3)    2.060    0.152   13.529    0.000    2.060    0.918 #>     st.g.1_4 (lx4)    1.854    0.151   12.295    0.000    1.854    0.868 #>     st.g.1_5 (lx5)    2.002    0.166   12.051    0.000    2.002    0.821 #>   Sat2 =~                                                                #>     st.g.2_1 (lx1)    2.061    0.151   13.683    0.000    1.900    0.917 #>     st.g.2_2 (lx2)    1.964    0.159   12.375    0.000    1.811    0.905 #>     st.g.2_3 (lx3)    2.060    0.152   13.529    0.000    1.899    0.919 #>     st.g.2_4 (lx4)    1.854    0.151   12.295    0.000    1.709    0.834 #>     st.g.2_5 (lx5)    2.002    0.166   12.051    0.000    1.845    0.880 #>   Com1 =~                                                                #>     com.1_1  (ly1)    1.313    0.109   12.083    0.000    1.786    0.926 #>     com.1_2  (ly2)    1.232    0.108   11.356    0.000    1.676    0.761 #>     com.1_3  (ly3)    0.185    0.159    1.164    0.244    0.252    0.081 #>     com.1_4  (ly4)   -0.075    0.159   -0.475    0.635   -0.103   -0.033 #>     com.1_5  (ly5)    1.280    0.109   11.796    0.000    1.742    0.892 #>   Com2 =~                                                                #>     com.2_1  (ly1)    1.313    0.109   12.083    0.000    1.998    0.916 #>     com.2_2  (ly2)    1.232    0.108   11.356    0.000    1.876    0.935 #>     com.2_3  (ly3)    0.185    0.159    1.164    0.244    0.282    0.093 #>     com.2_4  (ly4)   -0.075    0.159   -0.475    0.635   -0.115   -0.038 #>     com.2_5  (ly5)    1.280    0.109   11.796    0.000    1.950    0.923 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   Com1 ~                                                                 #>     Sat1       (a)    0.623    0.134    4.656    0.000    0.458    0.458 #>   Com2 ~                                                                 #>     Sat2       (a)    0.623    0.134    4.656    0.000    0.377    0.377 #>   Com1 ~                                                                 #>     Sat2       (p)    0.383    0.125    3.074    0.002    0.259    0.259 #>   Com2 ~                                                                 #>     Sat1       (p)    0.383    0.125    3.074    0.002    0.251    0.251 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>  .sat.g.1_1 ~~                                                           #>    .sat.g.2_1        -0.170    0.085   -2.005    0.045   -0.170   -0.264 #>  .sat.g.1_2 ~~                                                           #>    .sat.g.2_2         0.344    0.115    2.977    0.003    0.344    0.350 #>  .sat.g.1_3 ~~                                                           #>    .sat.g.2_3        -0.195    0.091   -2.134    0.033   -0.195   -0.270 #>  .sat.g.1_4 ~~                                                           #>    .sat.g.2_4         0.110    0.129    0.858    0.391    0.110    0.092 #>  .sat.g.1_5 ~~                                                           #>    .sat.g.2_5         0.257    0.151    1.704    0.088    0.257    0.186 #>  .com.1_1 ~~                                                             #>    .com.2_1          -0.154    0.099   -1.556    0.120   -0.154   -0.241 #>  .com.1_2 ~~                                                             #>    .com.2_2          -0.221    0.130   -1.700    0.089   -0.221   -0.217 #>  .com.1_3 ~~                                                             #>    .com.2_3           3.145    0.942    3.337    0.001    3.145    0.336 #>  .com.1_4 ~~                                                             #>    .com.2_4           4.428    0.994    4.453    0.000    4.428    0.469 #>  .com.1_5 ~~                                                             #>    .com.2_5          -0.040    0.098   -0.407    0.684   -0.040   -0.056 #>   Sat1 ~~                                                                #>     Sat2              0.709    0.063   11.322    0.000    0.770    0.770 #>  .Com1 ~~                                                                #>    .Com2              0.534    0.125    4.257    0.000    0.436    0.436 #>  #> Intercepts: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .sat.g.1_1         6.609    0.210   31.448    0.000    6.609    2.998 #>    .sat.g.1_2         6.591    0.217   30.325    0.000    6.591    2.891 #>    .sat.g.1_3         6.391    0.214   29.884    0.000    6.391    2.849 #>    .sat.g.1_4         6.673    0.204   32.781    0.000    6.673    3.126 #>    .sat.g.1_5         6.445    0.232   27.736    0.000    6.445    2.644 #>    .sat.g.2_1         6.918    0.198   35.025    0.000    6.918    3.340 #>    .sat.g.2_2         6.927    0.191   36.334    0.000    6.927    3.464 #>    .sat.g.2_3         6.727    0.197   34.149    0.000    6.727    3.256 #>    .sat.g.2_4         7.155    0.195   36.611    0.000    7.155    3.491 #>    .sat.g.2_5         6.864    0.200   34.350    0.000    6.864    3.275 #>    .com.1_1           7.527    0.184   40.935    0.000    7.527    3.903 #>    .com.1_2           7.236    0.210   34.476    0.000    7.236    3.287 #>    .com.1_3           4.809    0.295   16.277    0.000    4.809    1.552 #>    .com.1_4           4.300    0.298   14.453    0.000    4.300    1.378 #>    .com.1_5           7.282    0.186   39.101    0.000    7.282    3.728 #>    .com.2_1           7.327    0.208   35.231    0.000    7.327    3.359 #>    .com.2_2           7.345    0.191   38.391    0.000    7.345    3.660 #>    .com.2_3           5.118    0.290   17.623    0.000    5.118    1.680 #>    .com.2_4           4.136    0.289   14.319    0.000    4.136    1.365 #>    .com.2_5           7.191    0.201   35.724    0.000    7.191    3.406 #>     Sat1              0.000                               0.000    0.000 #>     Sat2              0.000                               0.000    0.000 #>    .Com1              0.000                               0.000    0.000 #>    .Com2              0.000                               0.000    0.000 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .sat.g.1_1         0.610    0.119    5.111    0.000    0.610    0.126 #>    .sat.g.1_2         1.338    0.206    6.494    0.000    1.338    0.258 #>    .sat.g.1_3         0.789    0.140    5.639    0.000    0.789    0.157 #>    .sat.g.1_4         1.120    0.174    6.444    0.000    1.120    0.246 #>    .sat.g.1_5         1.934    0.286    6.769    0.000    1.934    0.326 #>    .sat.g.2_1         0.682    0.119    5.738    0.000    0.682    0.159 #>    .sat.g.2_2         0.720    0.121    5.968    0.000    0.720    0.180 #>    .sat.g.2_3         0.664    0.117    5.695    0.000    0.664    0.156 #>    .sat.g.2_4         1.280    0.190    6.724    0.000    1.280    0.305 #>    .sat.g.2_5         0.987    0.155    6.349    0.000    0.987    0.225 #>    .com.1_1           0.531    0.142    3.736    0.000    0.531    0.143 #>    .com.1_2           2.037    0.307    6.634    0.000    2.037    0.420 #>    .com.1_3           9.539    1.287    7.413    0.000    9.539    0.993 #>    .com.1_4           9.727    1.312    7.416    0.000    9.727    0.999 #>    .com.1_5           0.780    0.159    4.920    0.000    0.780    0.205 #>    .com.2_1           0.765    0.145    5.285    0.000    0.765    0.161 #>    .com.2_2           0.509    0.112    4.556    0.000    0.509    0.126 #>    .com.2_3           9.199    1.241    7.413    0.000    9.199    0.991 #>    .com.2_4           9.167    1.236    7.416    0.000    9.167    0.999 #>    .com.2_5           0.656    0.130    5.055    0.000    0.656    0.147 #>     Sat1              1.000                               1.000    1.000 #>     Sat2              0.850    0.115    7.366    0.000    1.000    1.000 #>    .Com1              1.000                               0.540    0.540 #>    .Com2              1.504    0.307    4.896    0.000    0.649    0.649 #>  #> R-Square: #>                    Estimate #>     sat.g.1_1         0.874 #>     sat.g.1_2         0.742 #>     sat.g.1_3         0.843 #>     sat.g.1_4         0.754 #>     sat.g.1_5         0.674 #>     sat.g.2_1         0.841 #>     sat.g.2_2         0.820 #>     sat.g.2_3         0.844 #>     sat.g.2_4         0.695 #>     sat.g.2_5         0.775 #>     com.1_1           0.857 #>     com.1_2           0.580 #>     com.1_3           0.007 #>     com.1_4           0.001 #>     com.1_5           0.795 #>     com.2_1           0.839 #>     com.2_2           0.874 #>     com.2_3           0.009 #>     com.2_4           0.001 #>     com.2_5           0.853 #>     Com1              0.460 #>     Com2              0.351 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>     k                 0.614    0.274    2.245    0.025    0.566    0.566"},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"why-dysem","dir":"Articles","previous_headings":"","what":"Why dySEM?","title":"dySEM overview","text":"Speeds writing lavaan syntax latent dyadic models Makes easy share code Helps prevent typos model-misspecifications mucking analyses /reporting Creates figures “90% Ready” tables results ","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"the-dysem-workflow-at-a-glance","dir":"Articles","previous_headings":"","what":"The dySEM Workflow at a Glance","title":"dySEM overview","text":"dySEM designed maximally useful following best-practices reproducibility using R. Namely, using separate directory R Studio Project (.Rproj, see new using projects) allow dySEM helpful, creating sub-folders scripts output automatically save scripts create, tables /figures output create. dySEM still things without use R Studio project, bets R Studio attempt save . typical dySEM workflow follows: Import wrangle Data dyad structure data set Scrape variables data frame Script preferred model Fit Inspect scripted model using lavaan Output statistical table(s) visualization(s) might also use optional dySEM calculators Step 3 get additional information. families functions–Scrapers, Scripters, Outputters, Getters–listed described Reference now demonstrate typical dySEM workflow, using built-DRES data (Raposo, Impett, & Muise, 2020), order perform dyadic confirmatory factor analysis (CFA). elaborate specific vignettes forthcoming provide didactic materials conducting sorts dyadic data analyses via dySEM.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"import-and-wrangle-data","dir":"Articles","previous_headings":"","what":"1. Import and Wrangle Data","title":"dySEM overview","text":"use subset DRES, consisting 121 dyadic couples’ ratings relationship quality 9 PRQC indicators (1 = , 7 = extremely; indicators positively keyed). Structural equation modeling (SEM) programs like lavaan require dyadic data dyad structure dataset, whereby row contains data one dyad, separate columns observation (case, indicator variables latent relationship quality) made member dyad. may eventually build data-transformation functions go various data structures dyad structure, now, recommend tidyr::pivot_wider tools provided Ledermann & Kenny (2014) Like many real-world analytic contexts, DRES contains number variables aren’t interested modeling time (specifically, 5 indicators sexual satisfaction GMSEX dyad member). problem dySEM. data set therefore results tibble 121 (# couples) x 28 ((9 PRQC items + 5 GMSEX items) x 2 (# dyad members)):","code":"DRES #> # A tibble: 121 × 28 #>    PRQC_1.1 PRQC_2.1 PRQC_3.1 PRQC_4.1 PRQC_5.1 PRQC_6.1 PRQC_7.1 PRQC_8.1 #>       <int>    <int>    <int>    <int>    <int>    <int>    <int>    <int> #>  1        7        7        7        7        7        7        7        5 #>  2        6        6        6        7        7        6        5        5 #>  3        7        7        7        7        7        7        7        6 #>  4        6        6        6        7        7        6        5        6 #>  5        7        7        7        7        7        6        7        6 #>  6        6        6        6        6        6        3        6        5 #>  7        7        6        7        6        6        6        5        6 #>  8        6        7        7        7        7        6        5        6 #>  9        7        7        7        7        7        6        6        6 #> 10        6        6        6        7        7        7        4        4 #> # ℹ 111 more rows #> # ℹ 20 more variables: PRQC_9.1 <int>, PRQC_1.2 <int>, PRQC_2.2 <int>, #> #   PRQC_3.2 <int>, PRQC_4.2 <int>, PRQC_5.2 <int>, PRQC_6.2 <int>, #> #   PRQC_7.2 <int>, PRQC_8.2 <int>, PRQC_9.2 <int>, sexsat1.1 <int>, #> #   sexsat2.1 <int>, sexsat3.1 <int>, sexsat4.1 <int>, sexsat5.1 <int>, #> #   sexsat1.2 <int>, sexsat2.2 <int>, sexsat3.2 <int>, sexsat4.2 <int>, #> #   sexsat5.2 <int>"},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"scrape","dir":"Articles","previous_headings":"","what":"2. Scrape","title":"dySEM overview","text":"first step typical dySEM workflow scrape indicator variables feature latent dyadic model. scraping functions dySEM accomplish making important reasonable (cases) assumptions useR named indicator variables. Specifically: Indicator variables latent variable named highly repetitious manner, distinguished partner using two numbers characters","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"anatomy-of-a-repetitious-indicator-name","dir":"Articles","previous_headings":"2. Scrape","what":"Anatomy of a Repetitious Indicator Name","title":"dySEM overview","text":"dySEM scrapers consider appropriately repetitiously named indicators consisting least three distinct elements: stem, item, partner. longitudinal designs, fourth element–time also considered part repetitious structure variable names, cover longitudinal variable-scraping separate vignette. delimiter characters (e.g., “.”, “_“) commonly–always–used separate /elements. : MAKE SIMPLER START VISUALS POINT indicator stem (.e., character(s) captures scale/latent variable indicators correspond, e.g., “PRQC”, “sexsat”, “BFI”, etc.). contents indicator stems vary considerably within data sets. indicator item number (.e, number captures indicator–within set indicators n length–located given column, e.g., 1-9 PRQC items) number character partner capturing member dyad (first second) given indicator corresponds (e.g., “” “B”, “M” “F”, “1” “2”). Note: variable selection; bearing whether given dyadic model specified ()distinguishable (determined script). dySEM scrapers largely function asking specify order elements variable names ordered. example: * x_order = \"sip\" scrape variable names according stem –> item –> partner order (e.g., PRQC)","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"using-dysem-scrapers","dir":"Articles","previous_headings":"2. Scrape","what":"Using dySEM Scrapers","title":"dySEM overview","text":"scrapeVarCross function dySEM scraper cross-sectional dyadic data. can accommodate scraping indicators models featuring one latent variable (e.g., dyadic CFA), well bivariate latent variable models, Actor-Partner Interdependence Model (APIM). cover scraping scripting bivariate models vignettes. first supply data frame, DRES. want extract PRQC indicators, following properties: reoccuring Stem “PRQC” distinguishing Partner characters “1” “2” “sip” (Stem, Item, Partner) order elements S separated “_” delimiter P separated “.” delimiter Feeding information scrapeVarCross quite straightforward: looking scrapeVarCross returns, may wondering: information Item number indicator specified? … indicator names don’t use two () delimiting characters? answer 1. Item number automatically captured “behind scenes” scrapeVarCross. Specifically, scrapeVarCross searches (captures) variable names containing stem digit(s) (using regular expression). answer 2. simply omit x_delim1 /x_delim2 arguments–default, scrapeVarCross create variable names S P without separating delimiters, unless declare character one/delimiter arguments. scrapeVarCross returns generic list (refer dvn list “dyad variable names”) consisting 6 (9, scraping bivariate model) elements: vector indicator names first member dyad vector indicator names second member dyad number capturing many indicators per dyad member stored distinguishing character names indicators first member dyad distinguishing character names indicators second member dyad total number indicators scraped might seem like much, list returned scrapeVarCross contains information needed automate scripting lavaan syntax virtually dyadic SEM can imagine.","code":"dvn <- scrapeVarCross(DRES, x_order = \"sip\", x_stem = \"PRQC\", x_delim1=\"_\",x_delim2=\".\",  distinguish_1=\"1\", distinguish_2=\"2\")"},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"script","dir":"Articles","previous_headings":"","what":"3. Script","title":"dySEM overview","text":"script...() TODO: CREATE/LINK family Reference pkgdown site: family functions dySEM simplify process accurately reproducibly scripting dyadic SEMs singleton line R code. Scripter function wrapper series Helper functions (see scriptHelpers.R interested) snatch information indicators need saved dvn object combine text write lavaan syntax particular part measurement (e.g., factor loadings, item intercepts) structural (e.g., regression slopes, factor means) portion model. Scripter functions like scriptCFA typically require three arguments specified: dvn object (e.g., scrapeVarCross) used script model mostly arbitrary name latent variable(s) modeling (bivariate model scripting functions like scriptAPIM input two names) kind parameter equality constraints wish imposed (), corresponding particular levels measurement invariance (e.g., “loading”), even fully “indistinguishable” model (.e., measurement structural parameters constrained equality partners) plan scripting multiple models, recommend name output Scripters include information latent variable’s name (2.) model (3.). example, use scriptCFA generate scripts indistinguishable CFA (.e., imposing dyadic invariance equality latent variances means partners [default options constr_dy_meas constr_dy_struct arguments]) PRQC items scraped, specify scriptCFA returns environment (ugly, human-eyes) character object consisting lavaan syntax corresponding model matches Scripter function (.e., case CFA) input model argument (.e., configurally invariant). Meanwhile, behind scenes, scriptCFA created folder working directory called “scripts”, stored .txt file containing (less-ugly, human eyes) lavaan syntax model. file named combination lvname model arguments. think syntax-exporting-.txt feature serves three important purposes: makes easy immediately share analytic code (.e., just drop .txt file OSF project) can useful exemplar learn certain model features dyadic SEMs scripted lavaan. example, Scripters manually specify (label) estimation certain parameters already estimated default, way can learn differences model specification (e.g., changing different level invariance) impacts lavaan syntax. … require model customizable (e.g., particular pattern partial dyadic invariance), text .txt file can serve useful starting point scripting model (hopefully) require “handmade” changes (e.g., keeping item intercepts equated via model = \"intercepts, manually freeing appreciably different). modeling efficiency accuracy gained via dySEM’s automated scripting may already apparent, becomes painfully obvious leverage dySEM quickly script sequence competing models (e.g., configural invariance CFA –> fully indistinguishable CFA) scripting longitudinal dyadic SEM models yet supported dySEM, hope develop functionality Spring/Summer 2021.","code":"qual.indist.script <- scriptCFA(dvn, lvname = \"Quality\") qual.res.script <- scriptCFA(dvn, lvname = \"Quality\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = c(\"none\"))  qual.int.script <- scriptCFA(dvn, lvname = \"Quality\", constr_dy_meas = c(\"loadings\", \"intercepts\"), constr_dy_struct = c(\"none\"))  qual.load.script <- scriptCFA(dvn, lvname = \"Quality\", constr_dy_meas = c(\"loadings\"), constr_dy_struct = c(\"none\"))  qual.config.script <- scriptCFA(dvn, lvname = \"Quality\", constr_dy_meas = c(\"none\"), constr_dy_struct = c(\"none\"))"},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"fit-and-inspect","dir":"Articles","previous_headings":"","what":"4. Fit and Inspect","title":"dySEM overview","text":"design, attempted avoid functionality pertaining model-fitting inspection dySEM: lavaan perfectly well . therefore strongly recommend cultivate command lavaan’s basic functionality delving far dySEM–package tutorial website good place get started. can immediately pass script(s) returned dySEM scripter (e.g., scriptCFA) intended lavaan wrapper (recommend cfa–sure disable options might fix parameters, scripter already taken care manually specifying parameters fix estimate), preferred estimator missing data treatment. example, dyadic invariance testing, recommend starting parsimonious model (indistinguishable model), gradually relaxing constraints different groups parameters: point, full arsenal lavaan model-inspecting tools disposal. Two almost certainly want make use summary anova. summary useful printing model fit information well parameter estimates tests console. example: anova, meanwhile, enable perform comparisons competing nested dyadic models. example: can learn kinds detail can extract fitted lavaan model .","code":"#Fit fully indistinguishable model qual.ind.fit <- lavaan::cfa(qual.indist.script, data = DRES, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  #Fit residual invariance model qual.res.fit <- lavaan::cfa(qual.res.script, data = DRES, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  #Fit intercept invariance model qual.int.fit <- lavaan::cfa(qual.int.script, data = DRES, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  #Fit loading invariance model qual.load.fit <- lavaan::cfa(qual.load.script, data = DRES, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  #Fit configural invariance model qual.config.fit <- lavaan::cfa(qual.config.script, data = DRES, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE) summary(qual.config.fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE) anova(qual.config.fit, qual.load.fit, qual.int.fit, qual.res.fit, qual.ind.fit) #>  #> Chi-Squared Difference Test #>  #>                  Df    AIC    BIC  Chisq Chisq diff    RMSEA Df diff Pr(>Chisq) #> qual.config.fit 125 5102.8 5280.6 573.33                                        #> qual.load.fit   133 5096.5 5252.2 583.09     9.7565 0.042954       8     0.2825 #> qual.int.fit    141 5089.1 5222.5 591.66     8.5669 0.024403       8     0.3801 #> qual.res.fit    150 5083.5 5191.9 604.04    12.3872 0.056237       9     0.1924 #> qual.ind.fit    152 5081.4 5184.2 605.97     1.9264 0.000000       2     0.3817"},{"path":"https://jsakaluk.github.io/dySEM/articles/dySEM.html","id":"output","dir":"Articles","previous_headings":"","what":"5. Output","title":"dySEM overview","text":"dySEM also contains functionality help quickly, correctly, reproducibly generate output fitted model(s), forms path diagrams /tables statistical values. Path diagram creation supported via semPlot package’s semPaths function. Tabling, meanwhile, supports (optional) returning gt tables, can customized publication-quality output (however functionality defaults merely returning data frame). tabling, useR must specify dvn scraped variables used script model type model outputted (e.g., “cfa”). tabling path diagraming, UseRs can specify directory path want file(s) written saved (e.g., setting writeTo = \".\" save current working directory). UseRs can specify kind path diagram (e.g., using standardized unstandardized value) tables (e.g., featuring measurement- structural-model parameter, ) created.","code":"outputParamTab(dvn, model = \"cfa\", fit = qual.indist.fit,                 tabletype = \"measurement\", writeTo = tempdir(),                 fileName = \"cfa_indist\")  outputParamFig(fit = qual.indist.fit, figtype = \"standardized\",                writeTo = tempdir(),                 fileName = \"cfa_indist\")"},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"tldr","dir":"Articles","previous_headings":"","what":"tl;dr:","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"normative invariance-testing ritual, including dyadic measurement models (Sakaluk et al., 2021), involves first fitting configurally invariant model (.e., measurement model parameters free vary partners). loading-invariant model (.e., loadings constrained equivalence partners) fit compared configurally invariant model; intercept-invariant model (loadings intercepts constrained equivalence partners) fit compared loading-invariant model, . final model determined constrained model appreciably ruin model fit (e.g., producing significant nested-model comparison, producing decrease absolute/relative model fit index beyond particular threshold, etc.). ritual can consider flawed /problematic least three reasons: ritual begins specification –testing –least parsimonious dyadic measurement model, opposed parsimonious. ritual involves inverting traditional null-hypothesis significance testing logic (circumstances, noninvariance considered undesirable) ritual tacitly promotes mindset “distinguishability default”, expense indistinguishable dyad types (e.g., -sex /-gender couples) historically excluded relationship science","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"a-lengthier-explanation","dir":"Articles","previous_headings":"","what":"A Lengthier Explanation","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"TBD","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"measurement-level-vs--structural-level-indistinguishability","dir":"Articles","previous_headings":"A More Logical and Inclusive Testing Sequence","what":"Measurement-Level vs. Structural-Level Indistinguishability","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"structural equation modeling latent variables, distinction typically made measurement model structural model. measurement model includes parameter types govern indicator variables (e.g., questionnaire items) statistical relationships latent variable(s) modeled. include: item intercepts (contained τ\\tau matrix) item loadings, (contained λ\\lambda matrix) item residual variances (contained θ\\theta matrix) Indeed, parameters work general-linear-model-like equation reproducing item responses based specified measurement model. Just bivariate regression, person’s () score outcome variable (Y) can produced intercept (.e., expected score Y X = 0), slope (.e., expected change Y every one-unit increase X), score predictor variable X, leftover residual variance (.e, difference observed predicted score Y)…: Yi=b0+b1Xi+ϵiY_i = b_0 + b_1X_i + \\epsilon_i …reflective latent variable model suggest person’s () response given item (e.g., sat.g.1.1) can produced item intercept (.e., expected score sat.g.1.1 standing latent variable 0), item loading (.e., expected change sat.g.1.1 every one-unit increase latent variable), score latent variable, leftover residual variance (.e, variance sat.g.1.1 unaccounted latent variable)… sat.g.1.1i=τ1+λ11ζi+θ11sat.g.1.1_i = \\tau_1 + \\lambda_{11}\\zeta_i + \\theta_{11} major conceptual distinction generic GLM equation plays every item measurement model, sat.g.1.2i=τ2+λ21ζi+θ22sat.g.1.2_i = \\tau_2 + \\lambda_{21}\\zeta_i + \\theta_{22} sat.g.1.3i=τ3+λ31ζi+θ33sat.g.1.3_i = \\tau_3 + \\lambda_{31}\\zeta_i + \\theta_{33} sat.g.1.4i=τ4+λ41ζi+θ44sat.g.1.4_i = \\tau_4 + \\lambda_{41}\\zeta_i + \\theta_{44} … etc. structural model, meanwhile, includes parameter types govern statistical properties latent variables , relationships one another. include: latent variances (contained Ψ\\Psi matrix) latent means (contained AA matrix) latent covariances/latent correlations (also contained Ψ\\Psi matrix), latent slopes (contained BB matrix) using term “indistinguishable” context structural equation modeling latent variables, therefore need careful precise conveying term “indistinguishable” meant apply. Typically, indistinguishability (exchangeability, interchangeability)(Griffin & Gonzalez, 1995; Olsen & Kenny, 2006) used refer dyadic models dyad members modeled variance(s) intrapersonal interpersonal covariance(s)/correlation(s)(Gonzalez & Griffin, 1999; Kenny et al., 2006). , though partners mean(s) strictly necessary, often presumed feature indistinguishability, models require adjustment means differ partners (Kenny et al., 2006). addition measurement model (.e., including loadings, residual (co)variances, intercepts) dyadic SEM, however, nuance terminology likely needed order avoid confusion might otherwise occur describing model “indistinguishable” dyads. therefore propose following terminology conventions describing exact component(s) dyadic SEM “indistinguishable”: Dyadic Measurement Invariance (Indistinguishability Measurement Model Across Partners) Dyadic Dispersion Equivalence (Indistinguishability Latent Variances /Standard Deviations) Dyadic Association Equivalence (Indistinguishability Latent Covariances, Correlations, /Regression Slopes Across Partners) Dyadic Level Equivalence (Indistinguishability Latent Means Across Partners) vocabulary offsets indistinguishability measurement model parameters (.e., loadings, residual (co)variances, intercepts) term “invariance”, indistinguishability structural model parameters (.e., latent (co)variances, correlations, slopes, means) term “equivalence.” invariance vs. equivalence also carried comparisons across design features, like groups /time. Dyads described fully indistinguishable components indistinguishability established within given study’s design, perhaps psychometrically indistinguishable measurement model parameters invariant structural model parameters vary, structurally indistinguishable measurement model parameters vary structural model parameters equivalent.","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"a-disclaimer-about-marker-variables","dir":"Articles","previous_headings":"A More Logical and Inclusive Testing Sequence > Meet Your Dyadic Measurement Invariance Models","what":"A Disclaimer About Marker Variables","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"Note: following models use “fixed-factor” scale-setting approach, whereby latent variance fixed 1 least one dyad member (must fixed configural model), latent mean fixed 0 least one dyad member (must fixed configural loading models). Scale-setting method choice won’t impact model fit therefore won’t affect model comparisons among invariance models, choice impact parameter estimation significance testing. Prior methodological research suggests “marker variable” method (fixing factor loading 1 latent variable; default software) can lead astray determining item(s) specifically responsible noninvariance (cover Additional Considerations section), strongly recommend adopt fixed-factor default scale-setting approach, especially invariance testing.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"the-new-proposed-sequence","dir":"Articles","previous_headings":"A More Logical and Inclusive Testing Sequence > Meet Your Dyadic Measurement Invariance Models","what":"The New Proposed Sequence","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"Instead normative invariance-testing ritual, propose flipping sequencing dyadic invariance testing, researchers begin specifying measurement-level indistinguishable (.e., residual-invariant) dyadic measurement model initial baseline model, loadings, intercepts, residual variances equated partners:  Researchers compare residual-invariant model incrementally less-parsimonious intercept-invariant model (freely estimated residual variances):  residual-invariant model rejected favour intercept-invariant model, intercept-invariant model become new baseline model. Researchers compare incrementally less-parsimonious loading-invariant model (freely estimated residual variances intercepts):  intercept-invariant model rejected favour loading-invariant model, loading-invariant model become new baseline model. Researchers compare incrementally least-parsimonious configurally invariant model (freely estimated residual variances, intercepts, loadings):  loading-invariant model rejected favour configurally invariant model, configurally invariant model best-supported measurement model. Otherwise, best supported model baseline model loading invariance model.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"example-data-and-scraping-variable-names","dir":"Articles","previous_headings":"","what":"Example Data and Scraping Variable Names","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"example dataset using contains items assessing relationship satisfaction commitment (five items , partners): just focus satisfaction items. use dySEM, begin scraping variables attempting model. first need identify repetitious “naming pattern” applied satisfaction items (see ()[https://jsakaluk.github.io/dySEM/articles/varnames.html] need refresher ). see items correspond “Stem” (sat.g), “Partner” (“1” “2”), “Item number” (1-5) “spi” ordering, “.” used separate stem partner, “_” used separate partner item number. assign object (arbitrarily) called “dvn” (think list capturing information (d)yad (v)ariable (n)ames): can visually confirm list contains: $p1xvarnames: five variable names Partner 1’s satisfaction item responses $p2xvarnames: five variable names Partner 2’s satisfaction item responses $xindper: number items Latent X (case, Satisfaction) partner $dist1: distinguishing character first partner $dist2: distinguishing character second partner $indnum: total number items modeled pieces information needed dySEM automate scripting dyadic CFA models variety specification options.","code":"library(dySEM) library(lavaan) library(semPlot)  dat <- commitmentQ names(dat) #>  [1] \"sat.g.1_1\" \"sat.g.1_2\" \"sat.g.1_3\" \"sat.g.1_4\" \"sat.g.1_5\" \"com.1_1\"   #>  [7] \"com.1_2\"   \"com.1_3\"   \"com.1_4\"   \"com.1_5\"   \"sat.g.2_1\" \"sat.g.2_2\" #> [13] \"sat.g.2_3\" \"sat.g.2_4\" \"sat.g.2_5\" \"com.2_1\"   \"com.2_2\"   \"com.2_3\"   #> [19] \"com.2_4\"   \"com.2_5\" dvn <- scrapeVarCross(dat = commitmentQ,                        x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\",                        distinguish_1=\"1\", distinguish_2=\"2\") dvn #> $p1xvarnames #> [1] \"sat.g.1_1\" \"sat.g.1_2\" \"sat.g.1_3\" \"sat.g.1_4\" \"sat.g.1_5\" #>  #> $p2xvarnames #> [1] \"sat.g.2_1\" \"sat.g.2_2\" \"sat.g.2_3\" \"sat.g.2_4\" \"sat.g.2_5\" #>  #> $xindper #> [1] 5 #>  #> $dist1 #> [1] \"1\" #>  #> $dist2 #> [1] \"2\" #>  #> $indnum #> [1] 10"},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"model-scripting","dir":"Articles","previous_headings":"Example Analysis","what":"Model Scripting","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"dySEM makes rest process testing dyadic invariance straightforward. first need use dySEM scripter functions generate correct code lavaan fit (1) residual-invariant, (2) intercept-invariant, (3) loading-invariant, (4) configurally invariance dyadic CFA models. model requires one use scriptCFA(), needs provided dvn list just created scrapeVarCross(), arbitrary name latent variable modeled, type invariance impose “model” argument. Critically, instead starting configural dyadic invariance (proceeding parsimonious/restrictive models), recommend starting parsimonious/restrictive model (full measurement-level indistinguishability), testing whether complicated models empirically warranted. return output scriptCFA(), doesn’t look particularly nice: Rest assured, lavaan can make sense applesauce; required text , light touch concatenate function (parse line-breaks text script), can see friendly human-readable version scriptCFA() generated: can now immediately pass models lavaan fitting.","code":"sat.residual.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = \"none\") sat.intercept.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\"), constr_dy_struct = \"none\") sat.loading.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\"), constr_dy_struct = \"none\") sat.config.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\") #> [1] \"#Measurement Model\\n\\n#Loadings\\nSat1=~NA*sat.g.1_1+lx1*sat.g.1_1+lx2*sat.g.1_2+lx3*sat.g.1_3+lx4*sat.g.1_4+lx5*sat.g.1_5\\nSat2=~NA*sat.g.2_1+lx1*sat.g.2_1+lx2*sat.g.2_2+lx3*sat.g.2_3+lx4*sat.g.2_4+lx5*sat.g.2_5\\n\\n#Intercepts\\nsat.g.1_1 ~ tx1*1\\nsat.g.1_2 ~ tx2*1\\nsat.g.1_3 ~ tx3*1\\nsat.g.1_4 ~ tx4*1\\nsat.g.1_5 ~ tx5*1\\n\\nsat.g.2_1 ~ tx1*1\\nsat.g.2_2 ~ tx2*1\\nsat.g.2_3 ~ tx3*1\\nsat.g.2_4 ~ tx4*1\\nsat.g.2_5 ~ tx5*1\\n\\n#Residual Variances\\nsat.g.1_1 ~~ thx1*sat.g.1_1\\nsat.g.1_2 ~~ thx2*sat.g.1_2\\nsat.g.1_3 ~~ thx3*sat.g.1_3\\nsat.g.1_4 ~~ thx4*sat.g.1_4\\nsat.g.1_5 ~~ thx5*sat.g.1_5\\n\\nsat.g.2_1 ~~ thx1*sat.g.2_1\\nsat.g.2_2 ~~ thx2*sat.g.2_2\\nsat.g.2_3 ~~ thx3*sat.g.2_3\\nsat.g.2_4 ~~ thx4*sat.g.2_4\\nsat.g.2_5 ~~ thx5*sat.g.2_5\\n\\n#Residual Covariances\\nsat.g.1_1 ~~ sat.g.2_1\\nsat.g.1_2 ~~ sat.g.2_2\\nsat.g.1_3 ~~ sat.g.2_3\\nsat.g.1_4 ~~ sat.g.2_4\\nsat.g.1_5 ~~ sat.g.2_5\\n\\n#Structural Model\\n\\n#Latent (Co)Variances\\nSat1 ~~ 1*Sat1\\nSat2 ~~ NA*Sat2\\nSat1 ~~ Sat2\\n\\n#Latent Means\\nSat1 ~ 0*1\\nSat2 ~ NA*1\" cat(sat.residual.script) #> #Measurement Model #>  #> #Loadings #> Sat1=~NA*sat.g.1_1+lx1*sat.g.1_1+lx2*sat.g.1_2+lx3*sat.g.1_3+lx4*sat.g.1_4+lx5*sat.g.1_5 #> Sat2=~NA*sat.g.2_1+lx1*sat.g.2_1+lx2*sat.g.2_2+lx3*sat.g.2_3+lx4*sat.g.2_4+lx5*sat.g.2_5 #>  #> #Intercepts #> sat.g.1_1 ~ tx1*1 #> sat.g.1_2 ~ tx2*1 #> sat.g.1_3 ~ tx3*1 #> sat.g.1_4 ~ tx4*1 #> sat.g.1_5 ~ tx5*1 #>  #> sat.g.2_1 ~ tx1*1 #> sat.g.2_2 ~ tx2*1 #> sat.g.2_3 ~ tx3*1 #> sat.g.2_4 ~ tx4*1 #> sat.g.2_5 ~ tx5*1 #>  #> #Residual Variances #> sat.g.1_1 ~~ thx1*sat.g.1_1 #> sat.g.1_2 ~~ thx2*sat.g.1_2 #> sat.g.1_3 ~~ thx3*sat.g.1_3 #> sat.g.1_4 ~~ thx4*sat.g.1_4 #> sat.g.1_5 ~~ thx5*sat.g.1_5 #>  #> sat.g.2_1 ~~ thx1*sat.g.2_1 #> sat.g.2_2 ~~ thx2*sat.g.2_2 #> sat.g.2_3 ~~ thx3*sat.g.2_3 #> sat.g.2_4 ~~ thx4*sat.g.2_4 #> sat.g.2_5 ~~ thx5*sat.g.2_5 #>  #> #Residual Covariances #> sat.g.1_1 ~~ sat.g.2_1 #> sat.g.1_2 ~~ sat.g.2_2 #> sat.g.1_3 ~~ sat.g.2_3 #> sat.g.1_4 ~~ sat.g.2_4 #> sat.g.1_5 ~~ sat.g.2_5 #>  #> #Structural Model #>  #> #Latent (Co)Variances #> Sat1 ~~ 1*Sat1 #> Sat2 ~~ NA*Sat2 #> Sat1 ~~ Sat2 #>  #> #Latent Means #> Sat1 ~ 0*1 #> Sat2 ~ NA*1"},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"model-fitting","dir":"Articles","previous_headings":"Example Analysis","what":"Model Fitting","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"","code":"sat.residual.fit <- cfa(sat.residual.script,                                   data = commitmentQ,                                   std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.intercept.fit <- cfa(sat.intercept.script,                                   data = commitmentQ,                                   std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.loading.fit <- cfa(sat.loading.script,                                   data = commitmentQ,                                   std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.config.fit <- cfa(sat.config.script,                                   data = commitmentQ,                                   std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)"},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"inspecting-output","dir":"Articles","previous_headings":"Example Analysis","what":"Inspecting Output","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"can expeditiously compare models : Unfortunately, default behavior anova() compare models order least parsimonious . essence, model testing approach defaults presuming full distinguishability, statistical “onus” researcher demonstrate case. therefore created alternative wrapper function anova(), called getInvarCompTable() reverses order model comparison process, indistinguishability measurement model base null model, researcher tests model determine subsequently relaxed groups constraints significantly improves model. requires input list four models, order: Beyond simpatico approach beginning parsimonious dyadic invariance model–testing support complicated one–think approach offers intuitive framing happening chisq df within model. , relaxing constraints (subsequent model) reduces misfit, therefore chisq decreases; relaxing constraints, meanwhile, increases model complexity adding parameters estimated, therefore lose “spend” df constraint relax. instance, can see significantly improve model relaxing constraints residual variances (.e., adopting intercept-invariance model), relaxing constraints dyads (.e., intercepts loadings) reduce misfit enough amount parsimony need sacrifice.","code":"out <- anova(sat.residual.fit, sat.intercept.fit, sat.loading.fit, sat.config.fit) mods <- list(sat.residual.fit, sat.intercept.fit, sat.loading.fit, sat.config.fit) outputInvarCompTab(mods) #> # A tibble: 4 × 15 #>   mod       chisq    df pvalue   aic   bic rmsea   cfi chisq_diff df_diff p_diff #>   <chr>     <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>      <dbl>   <dbl>  <dbl> #> 1 residual   78.8    42  0     3855. 3918. 0.087 0.97       NA         NA NA     #> 2 intercept  60.3    37  0.009 3847. 3924. 0.074 0.981     -18.5       -5  0.002 #> 3 loading    58.8    33  0.004 3853. 3941. 0.082 0.979      -1.51      -4  0.825 #> 4 configur…  53.0    29  0.004 3855. 3954. 0.085 0.981      -5.78      -4  0.216 #> # ℹ 4 more variables: aic_diff <dbl>, bic_diff <dbl>, rmsea_diff <dbl>, #> #   cfi_diff <dbl>"},{"path":[]},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"identifying-items-responsible-for-non-invariance-and-specifying-a-partial-invariance-model","dir":"Articles","previous_headings":"Additional Considerations","what":"Identifying Items Responsible for Non-invariance and Specifying A “Partial” Invariance Model","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"Appraising measurement invariance fashion tutorial exemplified, can thought akin “global” “omnibus” test measurement invariance; significantly worse-fitting model indicates measurement model invariant. However, approach identify items responsible non-invariance. words, need sort item-level “post hoc” test identify item(s) responsible non-invariance (problem common forms invariance testing, , like multi-group CFAs). lavaan, process carrying item-level noninvariance tests bit cumbersome (spoiler: don’t worry, dySEM one-liner automates !). first need use lavTestScore, either: submit model resulted significantly degraded fit (case, model invariant loadings + intercepts + residual variances), adopted traditional sequence invariance testing model comparisons (.e., starting least parsimonious first), , submit first model usurped significantly better fitting model (also invariant loadings + intercepts + residual variances model), adopted proposed sequence invariance testing model comparisons (.e., starting parsimonious first) Either approach use submit model lavTestScore; two merely differ framing considerations select appropriate model lavTestScore. lavTestScore return list item-level constraint, amount misfit introduced , degree(s) freedom gained constraint, p-values indicating whether respective amount significantly different zero. instance, see two constraints result significantly worse fit (12th 15th); problem , constraints rather cryptically labeled. proceeded “scratch” approach, ’d need use partable function generate list estimated constrained parameters, parameter label (“plabel”) assigned. way, remember 12th 15th parameter constraints significant, notice residual variances 2nd 5th items, respectively. built wrapper-function, outputConstraintTab, automates process . takes argument model resulted significantly degraded fit, returns list items responsible non-invariance, matching plabel taken place “behind scenes”, provided immediately readable intuitive list constraints: output, quickly see none individual equality constraints loadings (=~ operator) intercepts (~1 operator) significantly degraded model fit, two residual variance constraints (~~ operator) (2nd 5th items).","code":"lavTestScore(sat.residual.fit) #> $test #>  #> total score test: #>  #>    test     X2 df p.value #> 1 score 25.397 15   0.045 #>  #> $uni #>  #> univariate score tests: #>  #>      lhs op   rhs    X2 df p.value #> 1   .p1. ==  .p6. 0.541  1   0.462 #> 2   .p2. ==  .p7. 0.534  1   0.465 #> 3   .p3. ==  .p8. 0.055  1   0.814 #> 4   .p4. ==  .p9. 1.438  1   0.231 #> 5   .p5. == .p10. 2.201  1   0.138 #> 6  .p11. == .p16. 0.188  1   0.664 #> 7  .p12. == .p17. 0.023  1   0.878 #> 8  .p13. == .p18. 0.606  1   0.436 #> 9  .p14. == .p19. 1.010  1   0.315 #> 10 .p15. == .p20. 0.043  1   0.835 #> 11 .p21. == .p26. 0.031  1   0.860 #> 12 .p22. == .p27. 8.797  1   0.003 #> 13 .p23. == .p28. 0.910  1   0.340 #> 14 .p24. == .p29. 0.614  1   0.433 #> 15 .p25. == .p30. 7.848  1   0.005 partable(sat.residual.fit) #>    id       lhs op       rhs user block group free ustart exo label plabel #> 1   1      Sat1 =~ sat.g.1_1    1     1     1    1     NA   0   lx1   .p1. #> 2   2      Sat1 =~ sat.g.1_2    1     1     1    2     NA   0   lx2   .p2. #> 3   3      Sat1 =~ sat.g.1_3    1     1     1    3     NA   0   lx3   .p3. #> 4   4      Sat1 =~ sat.g.1_4    1     1     1    4     NA   0   lx4   .p4. #> 5   5      Sat1 =~ sat.g.1_5    1     1     1    5     NA   0   lx5   .p5. #> 6   6      Sat2 =~ sat.g.2_1    1     1     1    6     NA   0   lx1   .p6. #> 7   7      Sat2 =~ sat.g.2_2    1     1     1    7     NA   0   lx2   .p7. #> 8   8      Sat2 =~ sat.g.2_3    1     1     1    8     NA   0   lx3   .p8. #> 9   9      Sat2 =~ sat.g.2_4    1     1     1    9     NA   0   lx4   .p9. #> 10 10      Sat2 =~ sat.g.2_5    1     1     1   10     NA   0   lx5  .p10. #> 11 11 sat.g.1_1 ~1              1     1     1   11     NA   0   tx1  .p11. #> 12 12 sat.g.1_2 ~1              1     1     1   12     NA   0   tx2  .p12. #> 13 13 sat.g.1_3 ~1              1     1     1   13     NA   0   tx3  .p13. #> 14 14 sat.g.1_4 ~1              1     1     1   14     NA   0   tx4  .p14. #> 15 15 sat.g.1_5 ~1              1     1     1   15     NA   0   tx5  .p15. #> 16 16 sat.g.2_1 ~1              1     1     1   16     NA   0   tx1  .p16. #> 17 17 sat.g.2_2 ~1              1     1     1   17     NA   0   tx2  .p17. #> 18 18 sat.g.2_3 ~1              1     1     1   18     NA   0   tx3  .p18. #> 19 19 sat.g.2_4 ~1              1     1     1   19     NA   0   tx4  .p19. #> 20 20 sat.g.2_5 ~1              1     1     1   20     NA   0   tx5  .p20. #> 21 21 sat.g.1_1 ~~ sat.g.1_1    1     1     1   21     NA   0  thx1  .p21. #> 22 22 sat.g.1_2 ~~ sat.g.1_2    1     1     1   22     NA   0  thx2  .p22. #> 23 23 sat.g.1_3 ~~ sat.g.1_3    1     1     1   23     NA   0  thx3  .p23. #> 24 24 sat.g.1_4 ~~ sat.g.1_4    1     1     1   24     NA   0  thx4  .p24. #> 25 25 sat.g.1_5 ~~ sat.g.1_5    1     1     1   25     NA   0  thx5  .p25. #> 26 26 sat.g.2_1 ~~ sat.g.2_1    1     1     1   26     NA   0  thx1  .p26. #> 27 27 sat.g.2_2 ~~ sat.g.2_2    1     1     1   27     NA   0  thx2  .p27. #> 28 28 sat.g.2_3 ~~ sat.g.2_3    1     1     1   28     NA   0  thx3  .p28. #> 29 29 sat.g.2_4 ~~ sat.g.2_4    1     1     1   29     NA   0  thx4  .p29. #> 30 30 sat.g.2_5 ~~ sat.g.2_5    1     1     1   30     NA   0  thx5  .p30. #> 31 31 sat.g.1_1 ~~ sat.g.2_1    1     1     1   31     NA   0        .p31. #> 32 32 sat.g.1_2 ~~ sat.g.2_2    1     1     1   32     NA   0        .p32. #> 33 33 sat.g.1_3 ~~ sat.g.2_3    1     1     1   33     NA   0        .p33. #> 34 34 sat.g.1_4 ~~ sat.g.2_4    1     1     1   34     NA   0        .p34. #> 35 35 sat.g.1_5 ~~ sat.g.2_5    1     1     1   35     NA   0        .p35. #> 36 36      Sat1 ~~      Sat1    1     1     1    0      1   0        .p36. #> 37 37      Sat2 ~~      Sat2    1     1     1   36     NA   0        .p37. #> 38 38      Sat1 ~~      Sat2    1     1     1   37     NA   0        .p38. #> 39 39      Sat1 ~1              1     1     1    0      0   0        .p39. #> 40 40      Sat2 ~1              1     1     1   38     NA   0        .p40. #> 41 41      .p1. ==      .p6.    2     0     0    0     NA   0              #> 42 42      .p2. ==      .p7.    2     0     0    0     NA   0              #> 43 43      .p3. ==      .p8.    2     0     0    0     NA   0              #> 44 44      .p4. ==      .p9.    2     0     0    0     NA   0              #> 45 45      .p5. ==     .p10.    2     0     0    0     NA   0              #> 46 46     .p11. ==     .p16.    2     0     0    0     NA   0              #> 47 47     .p12. ==     .p17.    2     0     0    0     NA   0              #> 48 48     .p13. ==     .p18.    2     0     0    0     NA   0              #> 49 49     .p14. ==     .p19.    2     0     0    0     NA   0              #> 50 50     .p15. ==     .p20.    2     0     0    0     NA   0              #> 51 51     .p21. ==     .p26.    2     0     0    0     NA   0              #> 52 52     .p22. ==     .p27.    2     0     0    0     NA   0              #> 53 53     .p23. ==     .p28.    2     0     0    0     NA   0              #> 54 54     .p24. ==     .p29.    2     0     0    0     NA   0              #> 55 55     .p25. ==     .p30.    2     0     0    0     NA   0              #>    start    est    se #> 1  2.097  2.059 0.147 #> 2  1.858  1.957 0.154 #> 3  2.068  2.077 0.149 #> 4  1.982  1.879 0.149 #> 5  1.878  1.985 0.162 #> 6  1.000  2.059 0.147 #> 7  1.026  1.957 0.154 #> 8  1.004  2.077 0.149 #> 9  0.890  1.879 0.149 #> 10 1.028  1.985 0.162 #> 11 6.600  6.576 0.199 #> 12 6.548  6.555 0.200 #> 13 6.409  6.366 0.202 #> 14 6.661  6.723 0.193 #> 15 6.426  6.440 0.207 #> 16 6.930  6.576 0.199 #> 17 6.922  6.555 0.200 #> 18 6.704  6.366 0.202 #> 19 7.130  6.723 0.193 #> 20 6.817  6.440 0.207 #> 21 2.503  0.675 0.088 #> 22 2.472  1.055 0.120 #> 23 2.547  0.707 0.091 #> 24 2.442  1.181 0.126 #> 25 2.661  1.455 0.155 #> 26 2.041  0.675 0.088 #> 27 2.097  1.055 0.120 #> 28 2.078  0.707 0.091 #> 29 1.918  1.181 0.126 #> 30 2.353  1.455 0.155 #> 31 0.000 -0.212 0.087 #> 32 0.000  0.334 0.119 #> 33 0.000 -0.193 0.089 #> 34 0.000  0.123 0.125 #> 35 0.000  0.299 0.154 #> 36 1.000  1.000 0.000 #> 37 0.050  0.827 0.107 #> 38 0.000  0.718 0.059 #> 39 0.000  0.000 0.000 #> 40 0.000  0.184 0.066 #> 41 0.000  0.000 0.000 #> 42 0.000  0.000 0.000 #> 43 0.000  0.000 0.000 #> 44 0.000  0.000 0.000 #> 45 0.000  0.000 0.000 #> 46 0.000  0.000 0.000 #> 47 0.000  0.000 0.000 #> 48 0.000  0.000 0.000 #> 49 0.000  0.000 0.000 #> 50 0.000  0.000 0.000 #> 51 0.000  0.000 0.000 #> 52 0.000  0.000 0.000 #> 53 0.000  0.000 0.000 #> 54 0.000  0.000 0.000 #> 55 0.000  0.000 0.000 outputConstraintTab(sat.residual.fit) #> # A tibble: 15 × 7 #>    param1                   constraint param2            chi2    df pvalue sig   #>    <chr>                    <chr>      <chr>            <dbl> <dbl>  <dbl> <chr> #>  1 \"Sat1 =~ sat.g.1_1\"      ==         \"Sat2 =~ sat.g.… 0.541     1  0.462 NA    #>  2 \"Sat1 =~ sat.g.1_2\"      ==         \"Sat2 =~ sat.g.… 0.534     1  0.465 NA    #>  3 \"Sat1 =~ sat.g.1_3\"      ==         \"Sat2 =~ sat.g.… 0.055     1  0.814 NA    #>  4 \"Sat1 =~ sat.g.1_4\"      ==         \"Sat2 =~ sat.g.… 1.44      1  0.231 NA    #>  5 \"Sat1 =~ sat.g.1_5\"      ==         \"Sat2 =~ sat.g.… 2.20      1  0.138 NA    #>  6 \"sat.g.1_1 ~1 \"          ==         \"sat.g.2_1 ~1 \"  0.188     1  0.664 NA    #>  7 \"sat.g.1_2 ~1 \"          ==         \"sat.g.2_2 ~1 \"  0.023     1  0.878 NA    #>  8 \"sat.g.1_3 ~1 \"          ==         \"sat.g.2_3 ~1 \"  0.606     1  0.436 NA    #>  9 \"sat.g.1_4 ~1 \"          ==         \"sat.g.2_4 ~1 \"  1.01      1  0.315 NA    #> 10 \"sat.g.1_5 ~1 \"          ==         \"sat.g.2_5 ~1 \"  0.043     1  0.835 NA    #> 11 \"sat.g.1_1 ~~ sat.g.1_1\" ==         \"sat.g.2_1 ~~ s… 0.031     1  0.86  NA    #> 12 \"sat.g.1_2 ~~ sat.g.1_2\" ==         \"sat.g.2_2 ~~ s… 8.80      1  0.003 **    #> 13 \"sat.g.1_3 ~~ sat.g.1_3\" ==         \"sat.g.2_3 ~~ s… 0.91      1  0.34  NA    #> 14 \"sat.g.1_4 ~~ sat.g.1_4\" ==         \"sat.g.2_4 ~~ s… 0.614     1  0.433 NA    #> 15 \"sat.g.1_5 ~~ sat.g.1_5\" ==         \"sat.g.2_5 ~~ s… 7.85      1  0.005 **"},{"path":"https://jsakaluk.github.io/dySEM/articles/invariance.html","id":"calculating-and-considering-the-magnitude-of-difference-in-measurement-model-parameter-estimates","dir":"Articles","previous_headings":"Additional Considerations","what":"Calculating and Considering the Magnitude of Difference in Measurement Model Parameter Estimates","title":"Invariance Testing with Potentially Indistinguishable Dyads: Rationale and Practices for a More Logical and Inclusive Testing Sequence","text":"Finally, noninvariance present, ’s often informative quantify magnitude . Although often reported, variety effect size measures noninvariance (see Nye Drasgow, 2011; Gunn et al., 2020), one (dMACSd_{MACS}) adapted dyadic invariance case (Sakaluk et al., 2021). dMACSd_{MACS} gives standardized average difference given indicator score two members dyad, across normal latent variable distribution second partner assuming differences uniform (Gunn et al., 2020). Put another way, can think dMACSd_{MACS} providing standardized sense misleading noninvariance given item , terms either creating illusion group difference item, suppressing presence group difference item. , “Cohen’s d”-like computation, recognize given context measurement modeling (e.g., vs. t-test), users expect interpretative thresholds Cohen’s d hold (Nye et al., 2019). calculate dMACSd_{MACS} items, must first determine viable “partially invariant” model (Nye & Drasgow, 2011; Gunn et al, 2020): , model invariant parameters except identified significantly noninvariant previous step using getConstraintTests(). case, need specify model invariant parameters except residual variances 2nd 5th items. can pass data frame, dvn, partially invariant model getDydmacs function, return list dMACSd_{MACS} values item. case, dMACSd_{MACS} values 0; dMACSd_{MACS} measure sensitive noninvariance loadings intercepts (primary measurement models interest invariance testing), residual noninvariance 2nd 5th items contribute dMACSd_{MACS} values. Note, however, much noninvariance “matters” given case vary across contexts. Nye et al. (2019), example, note measurement model small number indicators, one large noninvariant item, consistent small levels noninvariance across items, can quite misleading. larger battery items, meanwhile, one two substantially noninvariant items may distorting influences ‘washed ’ invariant items.","code":"sat.partial.script <-' #Measurement Model  #Loadings Sat1=~NA*sat.g.1_1+lx1*sat.g.1_1+lx2*sat.g.1_2+lx3*sat.g.1_3+lx4*sat.g.1_4+lx5*sat.g.1_5 Sat2=~NA*sat.g.2_1+lx1*sat.g.2_1+lx2*sat.g.2_2+lx3*sat.g.2_3+lx4*sat.g.2_4+lx5*sat.g.2_5  #Intercepts sat.g.1_1 ~ tx1*1 sat.g.1_2 ~ tx2*1 sat.g.1_3 ~ tx3*1 sat.g.1_4 ~ tx4*1 sat.g.1_5 ~ tx5*1  sat.g.2_1 ~ tx1*1 sat.g.2_2 ~ tx2*1 sat.g.2_3 ~ tx3*1 sat.g.2_4 ~ tx4*1 sat.g.2_5 ~ tx5*1  #Residual Variances (free to noninvariant residuals) sat.g.1_1 ~~ thx1*sat.g.1_1 sat.g.1_2 ~~ sat.g.1_2 sat.g.1_3 ~~ thx3*sat.g.1_3 sat.g.1_4 ~~ thx4*sat.g.1_4 sat.g.1_5 ~~ sat.g.1_5  sat.g.2_1 ~~ thx1*sat.g.2_1 sat.g.2_2 ~~ sat.g.2_2 sat.g.2_3 ~~ thx3*sat.g.2_3 sat.g.2_4 ~~ thx4*sat.g.2_4 sat.g.2_5 ~~ sat.g.2_5  #Residual Covariances sat.g.1_1 ~~ sat.g.2_1 sat.g.1_2 ~~ sat.g.2_2 sat.g.1_3 ~~ sat.g.2_3 sat.g.1_4 ~~ sat.g.2_4 sat.g.1_5 ~~ sat.g.2_5  #Structural Model  #Latent (Co)Variances Sat1 ~~ 1*Sat1 Sat2 ~~ NA*Sat2 Sat1 ~~ Sat2  #Latent Means Sat1 ~ 0*1 Sat2 ~ NA*1  '  #Fit partial model sat.partial.fit <- cfa(sat.partial.script,                                   data = commitmentQ,                                   std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE) getDydmacs(dat, dvn, sat.partial.fit) #>      dMACS #> [1,]     0 #> [2,]     0 #> [3,]     0 #> [4,]     0 #> [5,]     0"},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Anatomy of a Variable Name","text":"users follow four-step process use dySEM: Scrape Variable Information Script Model Fit Model Output Desired Values steps, scraping variable information one important, yet unintuitive, researchers often take process naming variables granted. short tutorial, going focus patterns repetition present variable names many data sets, provide breakdown vocabulary “anatomy” variable names. Understanding elements make variable name therefore help apply efficient names dataset(s), navigate scraping step using dySEM easily using function like scrapeVarCross().","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"effective-variable-name-styling","dir":"Articles","previous_headings":"","what":"Effective Variable Name Styling","title":"Anatomy of a Variable Name","text":"Try remember last spreadsheet data interacted . Now think variables (.e., columns) within . names variables probably categorized terms dimensions styling, namely, clarity repetition variable name’s stem (.e., text content variable’s name). terms clarity, variable name stems thought probably ambiguous cryptic (e.g., Q1, Q19_1)–someone else wouldn’t immediately able understand kind data captured variable based stem alone.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"some-examples-of-ambiguous-variable-names","dir":"Articles","previous_headings":"Effective Variable Name Styling","what":"Some Examples of Ambiguous Variable Names","title":"Anatomy of a Variable Name","text":"variable name stems, meanwhile, probably intuitive. Variables corresponding 18 Experiences Close Relationships survey items, example, might named using intuitive acronym ecr, immediately recognized understood someone familiar study.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"some-examples-of-intuitive-variable-names","dir":"Articles","previous_headings":"Effective Variable Name Styling","what":"Some Examples of Intuitive Variable Names","title":"Anatomy of a Variable Name","text":"second dimension, repetition, sometimes subtle might immediately recognize feature variable name stems (important feature !). variable names–even refer set related variables–might highly inconsistent idiosyncratic. exemplar variables corresponding 18 Experiences Close Relationships survey items might named different descriptive text variable name, using different patterns text casing delimitation. kind inconsistent naming might strike unlikely occur “wild”. agree, therefore developed dySEM accordingly, betting exception, rule. point, however, inconsistent variable names , strictly speaking, conceivable. part, anticipate related variables named repetitiously: stem, casing, delimitation applied one many related variables applied .","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"some-examples-of-inconsistent-oh-the-horror-and-consistent-variable-names","dir":"Articles","previous_headings":"Effective Variable Name Styling","what":"Some Examples of Inconsistent (oh, the horror) and Consistent Variable Names","title":"Anatomy of a Variable Name","text":"two dimensions variable name styling play important, different, roles scraping variable information via dySEM. Clear names essential scraping functions (e.g., scrapeVarCross()) work properly, make quicker less error-prone coding. Repetitious names, meanwhile, (now, least) essential scraping functions. Thus, sure export prepare dataset way related set(s) variables intend use dySEM repetitious names.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"double-trouble-with-dyadic-variable-names","dir":"Articles","previous_headings":"","what":"Double-Trouble with Dyadic Variable Names","title":"Anatomy of a Variable Name","text":"Variable names get bit complicated context “dyad” (KENNY REF) “=ide” (MLM REF) datasets, datasets contain variable twice, two different columns: one member dyad.    variable needs unique name, typically, dyad datasets involve appending distinguishing character(s) number(s) make clear partner’s value given variable refers. distinguishers come one two varieties, corresponding type dyads study. dyads dataset “indistinguishable”–, ’s systematic consistent way assign dyad members particular role (e.g., friends, coworkers)–distinguishers usually arbitrary name designation. example, partner’s variables might given distinguisher “1” “”, partner’s variables might given distinguisher “2” “B”. particular two distinguishers selected cases ultimately matter (convey meaningful role-based information), long applied repetitiously dyad members.    , alternatively, dyads dataset “distinguishable”–, ’s systematic role defines members within dyad (e.g., heterosexual romantic partners, parent child, manager employee, therapist client)–opportunity distinguishers variable names selected clarity help (others) intuit partner’s data captured columns.","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"dissecting-dyadic-dataset-variable-names","dir":"Articles","previous_headings":"","what":"Dissecting Dyadic Dataset Variable Names","title":"Anatomy of a Variable Name","text":"point, already previewed major features variable name dyadic dataset–just need bring together. Understanding specific features labels use dySEM refer make much easier go use scraping function (e.g., scrapeVarCross()). Let’s imagine hypothetical dataset managers employee dyads reported positively felt respective jobs, using three-item questionnaire:    Breaking names , left following component features: variable stem: characters (ambiguous, [ideally] intuitive) consistent across variables, partners interested (e.g., pos) item number: number appears twice (per partner) indicates specific variable within sharing stem referenced (e.g., 2) partner distinguisher: character indicates variables correspond partner (e.g., m e) Delimiters “.” “_” can also used separate 1st feature 2nd, 2nd 3rd. Sometimes name might include one delimiter; times (case), might include two.    dyadic dataset variable name features arranged order (Stem, Item number, Partner distinguisher), refer “sip”-ordered using dySEM. variable naming conventions somewhat arbitrary varied; people can arrange dyadic variable names orders. example, another common ordering Stem, Partner distinguisher, Item number, refer “spi”-ordered using dySEM. “spi”-ordered variable names tend common used online survey program like Qualtrics collect data (e.g., questions partners embedded different sections survey).","code":""},{"path":"https://jsakaluk.github.io/dySEM/articles/varnames.html","id":"spi-ordered-dyadic-variable","dir":"Articles","previous_headings":"","what":"Spi-Ordered Dyadic Variable","title":"Anatomy of a Variable Name","text":"can identity variable stem, item number, partner distinguishers (delimiters elements), can correctly determine variable names “sip”-ordered “spi”-ordered, set learn first step using dySEM: scraping variable information. #link url scraping vignette","code":""},{"path":"https://jsakaluk.github.io/dySEM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Sakaluk. Author, maintainer, copyright holder. Omar Camanto. Author. Robyn Kilshaw. Contributor. Alexandra Fisher. Contributor.","code":""},{"path":"https://jsakaluk.github.io/dySEM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sakaluk, J. K., Fisher, . N., & Kilshaw, R. E. (2021). Dyadic Measurement invariance importance replicability romantic relationship science. Personal Relationships, 28(1), 190-226. https://doi.org/10.1111/pere.12341","code":"@Article{,   title = {Dyadic Measurement Invariance and Its Importance for Replicability in Romantic Relationship Science},   author = {John K. Sakaluk and Alexandra N. Fisher and Robyn E. Kilshaw},   journal = {Personal Relationships},   year = {2021},   volume = {28},   number = {1},   pages = {190-226},   doi = {10.1111/pere.12341}, }"},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Dyadic Structural Equation Modeling","text":"dySEM helps automate process scripting, fitting, reporting latent models dyadic data via lavaan. package developed used course research described Sakaluk, Fisher, & Kilshaw (2021). dySEM logo designed Lowell Deranleau (logo design inquiries, email: agangofwolves@gmail.com).","code":""},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dyadic Structural Equation Modeling","text":"can install released version dySEM CRAN : can install development version GitHub :","code":"install.packages(\"dySEM\") # install.packages(\"devtools\") devtools::install_github(\"jsakaluk/dySEM\")"},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"current-functionality","dir":"","previous_headings":"","what":"Current Functionality","title":"Dyadic Structural Equation Modeling","text":"package currently provides functionality regarding following types latent dyadic data models: Dyadic Confirmatory Factor Analysis Latent Actor-Partner Interdependence Models (APIM) Latent Common Fate Models (CFM) Latent Bifactor Dyadic (Bi-Dy) Models Observed Actor-Partner Interdependence (APIM) Dyadic Exploratory Factor Analysis (NEW) Additional features currently include: Automated specification invariance constraints model, including full indistinguishability Wrapper-function provide variable--parameter specific tests noninvariance Functions assist specification -SAT Models -NULL Models calibrated model fit indexes indistinguishable dyad models Functions assist reproducible creation path diagrams tables statistical output Functions calculate supplemental statistical information (e.g., omega reliability, noninvariance effect sizes, corrected model fit indexes)","code":""},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"future-functionality","dir":"","previous_headings":"","what":"Future Functionality","title":"Dyadic Structural Equation Modeling","text":"Shorter-term development goals include: Uni-construct “scripter” functions Multi-construct friendly functionality (e.g., dyadic CFA multiple subscales measure) Covariate scripting optionality Improved ease item selection scraper functions Longer-term goals, meanwhile, include: “Third-variable” models (e.g., mediators moderators) Longitudinal dyadic model scripting functions (e.g., curve factors, common fate growth) Latent dyadic response surface analysis scripting visualization functions Multi-group dyadic model scripting (e.g., comparing models samples heterosexual vs. LGBTQ+ dyads)","code":""},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"collaboration","dir":"","previous_headings":"","what":"Collaboration","title":"Dyadic Structural Equation Modeling","text":"Please submit feature requests via dySEM issues page, using “Wishlist dySEM Package Development” tag. interested collaborating development dySEM, please contact Dr. Sakaluk.","code":""},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"dysem-workflow","dir":"","previous_headings":"","what":"dySEM Workflow","title":"Dyadic Structural Equation Modeling","text":"dySEM workflow typically involves five steps, covered -depth Overview vignette. Briefly, steps include: Import wrangle data Scrape variables data frame Script preferred model Fit Inspect model via lavaan Output statistical visualizations /tables additional optional functions, well, help users calculate certain additional quantitative values (e.g., reliability, corrected model fit indexes models indistinguishable dyad members).","code":""},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"id_1-import-and-wrangle-data","dir":"","previous_headings":"dySEM Workflow","what":"1. Import and wrangle data","title":"Dyadic Structural Equation Modeling","text":"Structural equation modeling (SEM) programs like lavaan require dyadic data dyad structure data set, whereby row contains data one dyad, separate columns observation made member dyad. example:","code":"DRES #> # A tibble: 121 × 18 #>    PRQC_1.1 PRQC_2.1 PRQC_3.1 PRQC_4.1 PRQC_5.1 PRQC_6.1 PRQC_7.1 PRQC_8.1 #>       <int>    <int>    <int>    <int>    <int>    <int>    <int>    <int> #>  1        7        7        7        7        7        7        7        5 #>  2        6        6        6        7        7        6        5        5 #>  3        7        7        7        7        7        7        7        6 #>  4        6        6        6        7        7        6        5        6 #>  5        7        7        7        7        7        6        7        6 #>  6        6        6        6        6        6        3        6        5 #>  7        7        6        7        6        6        6        5        6 #>  8        6        7        7        7        7        6        5        6 #>  9        7        7        7        7        7        6        6        6 #> 10        6        6        6        7        7        7        4        4 #> # ℹ 111 more rows #> # ℹ 10 more variables: PRQC_9.1 <int>, PRQC_1.2 <int>, PRQC_2.2 <int>, #> #   PRQC_3.2 <int>, PRQC_4.2 <int>, PRQC_5.2 <int>, PRQC_6.2 <int>, #> #   PRQC_7.2 <int>, PRQC_8.2 <int>, PRQC_9.2 <int>"},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"id_2-scrape-variables-from-your-data-frame","dir":"","previous_headings":"dySEM Workflow","what":"2. Scrape variables from your data frame","title":"Dyadic Structural Equation Modeling","text":"dySEM scrapers consider appropriately repetitiously named indicators consisting least three distinct elements: stem, item, partner. Delimiter characters (e.g., “.”, “_“) commonly–always–used separate /elements.dySEM scrapers largely function asking specify order elements variable names ordered.","code":"dvn <- scrapeVarCross(DRES, x_order = \"sip\", x_stem = \"PRQC\", x_delim1=\"_\",x_delim2=\".\",  distinguish_1=\"1\", distinguish_2=\"2\")"},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"id_3-script-your-preferred-model","dir":"","previous_headings":"dySEM Workflow","what":"3. Script your preferred model","title":"Dyadic Structural Equation Modeling","text":"Scripter functions like scriptCFA typically require three arguments specified: dvn object (e.g., scrapeVarCross) used script model 1.arbitrary name(s) latent variable(s) modeling kind parameter equality constraints wish imposed () function returns character object lavaan compliant syntax chosen model, well exporting reproducible .txt scripted model /scripts folder working directory.","code":"qual.indist.script <- scriptCFA(dvn, lvname = \"Quality\")"},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"id_4-fit-and-inspect-your-model-via-lavaan","dir":"","previous_headings":"dySEM Workflow","what":"4. Fit and Inspect your model via lavaan","title":"Dyadic Structural Equation Modeling","text":"can immediately pass script(s) returned dySEM scripter preferred lavaan wrapper, estimator missing data treatment choice. example: point, full arsenal lavaan model-inspecting tools disposal. example:","code":"qual.indist.fit <- lavaan::cfa(qual.indist.script, data = DRES, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE) summary(qual.indist.fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)"},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"id_5-output-statistical-visualizations-andor-tables","dir":"","previous_headings":"dySEM Workflow","what":"5. Output statistical visualizations and/or tables","title":"Dyadic Structural Equation Modeling","text":"dySEM also contains functionality help quickly, correctly, reproducibly generate output fitted model(s), forms path diagrams /tables statistical values. default save temporary directory, can specify directory choice replacing tempdir() (e.g., \".\", place current working directory).","code":"outputParamTab(dvn, model = \"cfa\", fit = qual.indist.fit,                 tabletype = \"measurement\", writeTo = tempdir(),                 fileName = \"cfa_indist\")  outputParamFig(fit = qual.indist.fit, figtype = \"standardized\",                writeTo = tempdir(),                 fileName = \"cfa_indist\")"},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Dyadic Structural Equation Modeling","text":"Please note dySEM project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jsakaluk.github.io/dySEM/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Dyadic Structural Equation Modeling","text":"development dySEM generously supported Internal Grants Western University, including: Research Mobilization, Creation & Innovation Grants SSHRC-Related Research Western Knowledge Mobilization Innovation Grants","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/DRES.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationship quality and sexual satisfaction of 121 couples — DRES","title":"Relationship quality and sexual satisfaction of 121 couples — DRES","text":"dataset containing 9 observed indicators relationship quality (PRQC) 5 observed indicators sexual satisfaction 121 couples DRES (Daily Relationship Experiences Study; Raposo, Impett, & Muise, press)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/DRES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship quality and sexual satisfaction of 121 couples — DRES","text":"","code":"data(DRES)"},{"path":"https://jsakaluk.github.io/dySEM/reference/DRES.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relationship quality and sexual satisfaction of 121 couples — DRES","text":"data frame 121 rows 28 variables: PRQC_1.1 PRQC item 1 partner 1 PRQC_2.1 PRQC item 2 partner 1 PRQC_3.1 PRQC item 3 partner 1 PRQC_4.1 PRQC item 4 partner 1 PRQC_5.1 PRQC item 5 partner 1 PRQC_6.1 PRQC item 6 partner 1 PRQC_7.1 PRQC item 7 partner 1 PRQC_8.1 PRQC item 8 partner 1 PRQC_9.1 PRQC item 9 partner 1 PRQC_1.2 PRQC item 1 partner 2 PRQC_2.2 PRQC item 2 partner 2 PRQC_3.2 PRQC item 3 partner 2 PRQC_4.2 PRQC item 4 partner 2 PRQC_5.2 PRQC item 5 partner 2 PRQC_6.2 PRQC item 6 partner 2 PRQC_7.2 PRQC item 7 partner 2 PRQC_8.2 PRQC item 8 partner 2 PRQC_9.2 PRQC item 9 partner 2 sexsat1.1 sexual satisfaction item 1 partner 1 sexsat2.1 sexual satisfaction item 2 partner 1 sexsat3.1 sexual satisfaction item 3 partner 1 sexsat4.1 sexual satisfaction item 4 partner 1 sexsat5.1 sexual satisfaction item 5 partner 1 sexsat1.2 sexual satisfaction item 1 partner 2 sexsat2.2 sexual satisfaction item 2 partner 2 sexsat3.2 sexual satisfaction item 3 partner 2 sexsat4.2 sexual satisfaction item 4 partner 2 sexsat5.2 sexual satisfaction item 5 partner 2","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/DRES.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relationship quality and sexual satisfaction of 121 couples — DRES","text":"Raposo, S., Impett, E. ., & Muise, . (2020). Avoidantly Attached Individuals Exchange‐Oriented Less Communal Bedroom. Archives Sexual Behavior, 49, 2863–2881. https://doi.org/10.1007/s10508-020-01813-9","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentM.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratings of relational satisfaction and commitment from 282 (M)ixed-sex couples — commitmentM","title":"Ratings of relational satisfaction and commitment from 282 (M)ixed-sex couples — commitmentM","text":"data set containing 5 ratings satisfaction 5 ratings commitment member mixed-sex romantic dyad. Measured using Investment Model Scale subscales (Rusbult, Martz, & Agnew, 1998). Data Sakaluk, Fisher, Kilshaw's (2021) study dyadic invariance. Variable names re-coded follow stem-item-partner (\"sip\") order, delimiter (\"_\") item number partner distinguishing character.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratings of relational satisfaction and commitment from 282 (M)ixed-sex couples — commitmentM","text":"","code":"data(commitmentM)"},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ratings of relational satisfaction and commitment from 282 (M)ixed-sex couples — commitmentM","text":"data frame 282 rows 20 variables: sat.g1_f Satisfaction item 1 female partner sat.g2_f Satisfaction item 2 female partner sat.g3_f Satisfaction item 3 female partner sat.g4_f Satisfaction item 4 female partner sat.g5_f Satisfaction item 5 female partner com1_f Commitment items item 1 female partner com2_f Commitment items item 2 female partner com3_f Commitment items item 3 female partner com4_f Commitment items item 4 female partner com5_f Commitment items item 5 female partner sat.g1_m Satisfaction item 1 male partner sat.g2_m Satisfaction item 2 male partner sat.g3_m Satisfaction item 3 male partner sat.g4_m Satisfaction item 4 male partner sat.g5_m Satisfaction item 5 male partner com1_m Commitment items item 1 male partner com2_m Commitment items item 2 male partner com3_m Commitment items item 3 male partner com4_m Commitment items item 4 male partner com5_m Commitment items item 5 male partner","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ratings of relational satisfaction and commitment from 282 (M)ixed-sex couples — commitmentM","text":"Sakaluk, J. K., Fisher, . N., & Kilshaw, R. E.(2021). Dyadic measurement invariance importance replicability romantic relationship research. Personal Relationships, 28(1), 190-226.  .","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentQ.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratings of relational satisfaction and commitment from 282 (Q)ueer couples — commitmentQ","title":"Ratings of relational satisfaction and commitment from 282 (Q)ueer couples — commitmentQ","text":"data set containing 5 ratings satisfaction 5 ratings commitment member dyad one members identify LGBTQ+. Measured using Investment Model Scale subscales (Rusbult, Martz, & Agnew, 1998). Data Sakaluk, Fisher, Kilshaw (2021). Variable names follow stem-partner-item (\"spi\") order, delimiter (\".\") stem distinguishing partner character, another delimiter (\"_\") distinguishing partner character item number.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratings of relational satisfaction and commitment from 282 (Q)ueer couples — commitmentQ","text":"","code":"data(commitmentQ)"},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentQ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ratings of relational satisfaction and commitment from 282 (Q)ueer couples — commitmentQ","text":"data frame 118 rows 20 variables: sat.g.1_1 Satisfaction item 1 partner1 sat.g.1_2 Satisfaction item 2 partner1 sat.g.1_3 Satisfaction item 3 partner1 sat.g.1_4 Satisfaction item 4 partner1 sat.g.1_5 Satisfaction item 5 partner1 com.1_1 Commitment items item 1 partner1 com.1_2 Commitment items item 2 partner1 com.1_3 Commitment items item 3 partner1 com.1_4 Commitment items item 4 partner1 com.1_5 Commitment items item 5 partner1 sat.g.2_1 Satisfaction item 1 partner 2 sat.g.2_2 Satisfaction item 2 partner 2 sat.g.2_3 Satisfaction item 3 partner 2 sat.g.2_4 Satisfaction item 4 partner 2 sat.g.2_5 Satisfaction item 5 partner 2 com.2_1 Commitment items item 1 partner 2 com.2_2 Commitment items item 2 partner 2 com.2_3 Commitment items item 3 partner 2 com.2_4 Commitment items item 4 partner 2 com.2_5 Commitment items item 5 partner 2","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/commitmentQ.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ratings of relational satisfaction and commitment from 282 (Q)ueer couples — commitmentQ","text":"Sakaluk, J. K., Fisher, . N., & Kilshaw, R. E.(2021). Dyadic measurement invariance importance replicability romantic relationship research. Personal Relationships, 28(1), 190-226.  .#'","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getConstraintTests.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that performs a score test for relaxing each invariance equality constraint between partners in a given dyadic SEM model. — getConstraintTests","title":"A function that performs a score test for relaxing each invariance equality constraint between partners in a given dyadic SEM model. — getConstraintTests","text":"function performs score test relaxing invariance equality constraint partners given dyadic SEM model.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getConstraintTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that performs a score test for relaxing each invariance equality constraint between partners in a given dyadic SEM model. — getConstraintTests","text":"","code":"getConstraintTests(constrainFit, filterSig = FALSE)"},{"path":"https://jsakaluk.github.io/dySEM/reference/getConstraintTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that performs a score test for relaxing each invariance equality constraint between partners in a given dyadic SEM model. — getConstraintTests","text":"constrainFit fitted lavaan model dyadic invariance equality constraints filterSig logical indicating whether filter significant constraints (default FALSE)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getConstraintTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that performs a score test for relaxing each invariance equality constraint between partners in a given dyadic SEM model. — getConstraintTests","text":"data frame rows equality constraints (now readable param labels) test statistic, df, p whether constraint worsens model fit","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getConstraintTests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function that performs a score test for relaxing each invariance equality constraint between partners in a given dyadic SEM model. — getConstraintTests","text":"","code":"dvn <- scrapeVarCross(dat = commitmentM, x_order = \"sip\", x_stem = \"sat.g\", x_delim2=\"_\", distinguish_1=\"f\", distinguish_2=\"m\")  sat.resids.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = \"none\")  sat.resids.mod <- lavaan::cfa(sat.resids.script, data = commitmentM, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  getConstraintTests(sat.resids.mod) #> Warning: `getConstraintTests()` was deprecated in dySEM 1.1.0. #> ℹ Please use `dySEM::outputConstraintTab()` instead. #>                  param1 constraint               param2   chi2 df pvalue  sig #> 1      Satf =~ sat.g1_f         ==     Satm =~ sat.g1_m  1.131  1  0.288 <NA> #> 2      Satf =~ sat.g2_f         ==     Satm =~ sat.g2_m  0.633  1  0.426 <NA> #> 3      Satf =~ sat.g3_f         ==     Satm =~ sat.g3_m  0.060  1  0.806 <NA> #> 4      Satf =~ sat.g4_f         ==     Satm =~ sat.g4_m  1.839  1  0.175 <NA> #> 5      Satf =~ sat.g5_f         ==     Satm =~ sat.g5_m  3.603  1  0.058 <NA> #> 6          sat.g1_f ~1          ==         sat.g1_m ~1   0.057  1  0.812 <NA> #> 7          sat.g2_f ~1          ==         sat.g2_m ~1   1.316  1  0.251 <NA> #> 8          sat.g3_f ~1          ==         sat.g3_m ~1   0.048  1  0.827 <NA> #> 9          sat.g4_f ~1          ==         sat.g4_m ~1   0.103  1  0.748 <NA> #> 10         sat.g5_f ~1          ==         sat.g5_m ~1   2.090  1  0.148 <NA> #> 11 sat.g1_f ~~ sat.g1_f         == sat.g1_m ~~ sat.g1_m 22.977  1  0.000  *** #> 12 sat.g2_f ~~ sat.g2_f         == sat.g2_m ~~ sat.g2_m  0.263  1  0.608 <NA> #> 13 sat.g3_f ~~ sat.g3_f         == sat.g3_m ~~ sat.g3_m  0.317  1  0.573 <NA> #> 14 sat.g4_f ~~ sat.g4_f         == sat.g4_m ~~ sat.g4_m  2.422  1  0.120 <NA> #> 15 sat.g5_f ~~ sat.g5_f         == sat.g5_m ~~ sat.g5_m 17.185  1  0.000  ***"},{"path":"https://jsakaluk.github.io/dySEM/reference/getDyReliability.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function Calculates Omega Total Coefficients from a Dyadic CFA — getDyReliability","title":"A Function Calculates Omega Total Coefficients from a Dyadic CFA — getDyReliability","text":"function takes  model fitted scriptCFA() scripts returns omega total coefficients dyad member, adapted following Formula 2 McNeish (2018).","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getDyReliability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function Calculates Omega Total Coefficients from a Dyadic CFA — getDyReliability","text":"","code":"getDyReliability(dvn, fit)"},{"path":"https://jsakaluk.github.io/dySEM/reference/getDyReliability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function Calculates Omega Total Coefficients from a Dyadic CFA — getDyReliability","text":"dvn input dvn list scrapeVarCross fit outputted dyadic cfa lavaan object based default (.e., \"configural\") dyadCFA() function","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getDyReliability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function Calculates Omega Total Coefficients from a Dyadic CFA — getDyReliability","text":"tibble/data frame calculated omega total coefficients dyad Member 1 Member 2","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/getDyReliability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function Calculates Omega Total Coefficients from a Dyadic CFA — getDyReliability","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\") sat.indist.script <-  scriptCFA(dvn, lvname = \"Sat\") sat.indist.mod <- lavaan::cfa(sat.indist.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE) getDyReliability(dvn, sat.indist.mod) #> # A tibble: 1 × 2 #>   omega.1 omega.2 #>     <dbl>   <dbl> #> 1   0.948   0.948"},{"path":"https://jsakaluk.github.io/dySEM/reference/getDydmacs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates dmacs difference in expected indicator scores for between dyad members — getDydmacs","title":"Calculates dmacs difference in expected indicator scores for between dyad members — getDydmacs","text":"Calculates dmacs difference expected indicator scores dyad members","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getDydmacs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates dmacs difference in expected indicator scores for between dyad members — getDydmacs","text":"","code":"getDydmacs(dat, dvn, fit, nodewidth = 0.01, lowerLV = -5, upperLV = 5)"},{"path":"https://jsakaluk.github.io/dySEM/reference/getDydmacs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates dmacs difference in expected indicator scores for between dyad members — getDydmacs","text":"dat data frame indicators dvn input dvn list scrapeVarCross fit outputted dyadic cfa lavaan object; partial-invariance model nodewidth space nodes quadrature approximation (default = .01) lowerLV lowest latent variable value evaluated (default = -5) upperLV greatest latent variable value evaluated (default = 5)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getDydmacs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates dmacs difference in expected indicator scores for between dyad members — getDydmacs","text":"vector d_macs values","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/getDydmacs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates dmacs difference in expected indicator scores for between dyad members — getDydmacs","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\") sat.config.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\")  sat.config.mod <- lavaan::cfa(sat.config.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE) getDydmacs(commitmentQ, dvn, sat.config.mod) #>       dMACS #> [1,] 0.2034 #> [2,] 0.1755 #> [3,] 0.1695 #> [4,] 0.2776 #> [5,] 0.1770"},{"path":"https://jsakaluk.github.io/dySEM/reference/getIndistFit.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function that Computes Corrected Fit Indexes According to the ISAT and INULL Models of Olsen & Kenny (2006) — getIndistFit","title":"A Function that Computes Corrected Fit Indexes According to the ISAT and INULL Models of Olsen & Kenny (2006) — getIndistFit","text":"function takes outputted model fit using scriptCFA() model = \"indist\", well scriptISAT(), scriptINULL() computes corrected model fit indexes according approach outlined Olsen & Kenny (2006)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getIndistFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function that Computes Corrected Fit Indexes According to the ISAT and INULL Models of Olsen & Kenny (2006) — getIndistFit","text":"","code":"getIndistFit(indmodel, isatmod, inullmod)"},{"path":"https://jsakaluk.github.io/dySEM/reference/getIndistFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function that Computes Corrected Fit Indexes According to the ISAT and INULL Models of Olsen & Kenny (2006) — getIndistFit","text":"indmodel input lavaan model object fitted using dyadCFA(model = \"indistinguishable\") isatmod input lavaan model object fitted using ISAT() inullmod input lavaan model object fitted using INULL()","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getIndistFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function that Computes Corrected Fit Indexes According to the ISAT and INULL Models of Olsen & Kenny (2006) — getIndistFit","text":"data frame original corrected chi sq, df, p, rmsea, tli","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/getIndistFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function that Computes Corrected Fit Indexes According to the ISAT and INULL Models of Olsen & Kenny (2006) — getIndistFit","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.indist.script <-  scriptCFA(dvn, lvname = \"Sat\") sat.indist.mod <- lavaan::cfa(sat.indist.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.isat.script <- scriptISAT(dvn, lvxname = \"Sat\") sat.isat.mod <- lavaan::cfa(sat.isat.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = FALSE)  sat.inull.script <- scriptINULL(dvn, lvxname = \"Sat\") sat.inull.mod <- lavaan::cfa(sat.inull.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = FALSE)  getIndistFit(sat.indist.mod, sat.isat.mod, sat.inull.mod) #>   chi2_orig df_orig p_orig rmsea_orig tli_orig chi2_adj df_adj  p_adj rmsea_adj #> 1   88.7346      44  1e-04      0.094   0.9632  29.5661     14 0.0088    0.0983 #>    tli_adj #> 1 0.977164"},{"path":"https://jsakaluk.github.io/dySEM/reference/getInvarCompTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare model fit of nested dyadic invariance models in order from most parsimonious (residual) to least parsimonious (configural) — getInvarCompTable","title":"Compare model fit of nested dyadic invariance models in order from most parsimonious (residual) to least parsimonious (configural) — getInvarCompTable","text":"Compare model fit nested dyadic invariance models order parsimonious (residual) least parsimonious (configural)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getInvarCompTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare model fit of nested dyadic invariance models in order from most parsimonious (residual) to least parsimonious (configural) — getInvarCompTable","text":"","code":"getInvarCompTable(mods)"},{"path":"https://jsakaluk.github.io/dySEM/reference/getInvarCompTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare model fit of nested dyadic invariance models in order from most parsimonious (residual) to least parsimonious (configural) — getInvarCompTable","text":"mods list neted lavaan dyadic invariance models, order residual, intercept, loading, configural","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getInvarCompTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare model fit of nested dyadic invariance models in order from most parsimonious (residual) to least parsimonious (configural) — getInvarCompTable","text":"data frame model fit statistics model, well difference fit statistics model previous model","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/getInvarCompTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare model fit of nested dyadic invariance models in order from most parsimonious (residual) to least parsimonious (configural) — getInvarCompTable","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.residual.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = \"none\")  sat.intercept.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\"), constr_dy_struct = \"none\")  sat.loading.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\"), constr_dy_struct = \"none\")  sat.config.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\")  sat.residual.fit <- lavaan::cfa(sat.residual.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.intercept.fit <- lavaan::cfa(sat.intercept.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.loading.fit <- lavaan::cfa(sat.loading.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.config.fit <- lavaan::cfa(sat.config.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  mods <- list(sat.residual.fit, sat.intercept.fit, sat.loading.fit, sat.config.fit)  getInvarCompTable(mods) #> Warning: `getInvarCompTable()` was deprecated in dySEM 1.1.0. #> ℹ Please use `dySEM::outputInvarCompTab()` instead. #>          mod  chisq df pvalue      aic      bic rmsea   cfi chisq_diff df_diff #> 1   residual 78.842 42  0.000 3855.175 3918.308 0.087 0.970         NA      NA #> 2  intercept 60.321 37  0.009 3846.654 3923.512 0.074 0.981    -18.521      -5 #> 3    loading 58.810 33  0.004 3853.143 3940.981 0.082 0.979     -1.511      -4 #> 4 configural 53.026 29  0.004 3855.359 3954.176 0.085 0.981     -5.784      -4 #>   p_diff aic_diff bic_diff rmsea_diff cfi_diff #> 1     NA       NA       NA         NA       NA #> 2  0.002   -8.521    5.204     -0.013    0.011 #> 3  0.825    6.489   17.469      0.008   -0.002 #> 4  0.216    2.216   13.196      0.002    0.001"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputConstraintTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","title":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","text":"outputConstraintTab() used perform score test relaxing invariance equality constraint partners given dyadic SEM model.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputConstraintTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","text":"","code":"outputConstraintTab(   constrainFit,   filterSig = FALSE,   gtTab = FALSE,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputConstraintTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","text":"constrainFit fitted lavaan model dyadic invariance equality constraints filterSig logical indicating whether filter significant constraints (default FALSE) gtTab logical input indicating whether generate output gt::gt() table object format (TRUE). default (FALSE), output generated tibble::tibble() format. Users can also apply writeTo argument wish export gt:gt() table object. writeTo character string specifying directory path gt::gt() table object saved. set \".\", file written current working directory. default NULL, examples use temporary directory created tempdir(). writeTo relevant gtTab = TRUE. fileName character string specifying desired base name output gt::gt() file. fileName provided (.e., fileName = NULL), default used (.e., \"dySEM_table\"). resulting base name automatically appended .rtf file extension. fileName relevant gtTab = TRUE writeTo specified.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputConstraintTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","text":"list. specifically, tibble()—gtTab = FALSE (default)—gt::gt() object—gtTab = TRUE—rows equality constraints (now readable param labels) test statistic, df, p whether constraint worsens model fit.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputConstraintTab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","text":"gtTab = TRUE writeTo specified, output simultaneously saved .rtf file user's specified directory. output file successfully saved, confirmation message printed console. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputConstraintTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Invariance Equality Constraints in a specified Dyadic Invariance Model — outputConstraintTab","text":"","code":"dvn <- scrapeVarCross(dat = commitmentM, x_order = \"sip\", x_stem = \"sat.g\", x_delim2=\"_\", distinguish_1=\"f\", distinguish_2=\"m\")  sat.resids.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = \"none\")  sat.resids.mod <- lavaan::cfa(sat.resids.script, data = commitmentM, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputConstraintTab(sat.resids.mod, filterSig = FALSE, gtTab = TRUE, writeTo = tempdir(), fileName = \"dCFA_Residual\") #> Output stored in: /tmp/RtmpsLMzUg/dCFA_Residual.rtf     param1       constraint       param2       chi2       df       pvalue       sig     Satf =~ sat.g1_f == Satm =~ sat.g1_m 1.131 1 0.288 NASatf =~ sat.g2_f == Satm =~ sat.g2_m 0.633 1 0.426 NASatf =~ sat.g3_f == Satm =~ sat.g3_m 0.060 1 0.806 NASatf =~ sat.g4_f == Satm =~ sat.g4_m 1.839 1 0.175 NASatf =~ sat.g5_f == Satm =~ sat.g5_m 3.603 1 0.058 NAsat.g1_f ~1  == sat.g1_m ~1  0.057 1 0.812 NAsat.g2_f ~1  == sat.g2_m ~1  1.316 1 0.251 NAsat.g3_f ~1  == sat.g3_m ~1  0.048 1 0.827 NAsat.g4_f ~1  == sat.g4_m ~1  0.103 1 0.748 NAsat.g5_f ~1  == sat.g5_m ~1  2.090 1 0.148 NAsat.g1_f ~~ sat.g1_f == sat.g1_m ~~ sat.g1_m 22.977 1 0.000 ***sat.g2_f ~~ sat.g2_f == sat.g2_m ~~ sat.g2_m 0.263 1 0.608 NAsat.g3_f ~~ sat.g3_f == sat.g3_m ~~ sat.g3_m 0.317 1 0.573 NAsat.g4_f ~~ sat.g4_f == sat.g4_m ~~ sat.g4_m 2.422 1 0.120 NAsat.g5_f ~~ sat.g5_f == sat.g5_m ~~ sat.g5_m 17.185 1 0.000 ***"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputInvarCompTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","title":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","text":"outputInvarCompTab() used compare model fit nested dyadic invariance models order parsimonious (residual) least parsimonious (configural)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputInvarCompTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","text":"","code":"outputInvarCompTab(mods, gtTab = FALSE, writeTo = NULL, fileName = NULL)"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputInvarCompTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","text":"mods list nested lavaan dyadic invariance models, order residual, intercept, loading, configural gtTab logical input indicating whether generate output gt::gt() table object format (TRUE). default (FALSE), output generated tibble::tibble() format. Users can also apply writeTo argument wish export gt:gt() table object. writeTo character string specifying directory path gt::gt() table object saved. set \".\", file written current working directory. default NULL, examples use temporary directory created tempdir(). writeTo relevant gtTab = TRUE. fileName character string specifying desired base name output gt::gt() file. fileName provided (.e., fileName = NULL), default used (.e., \"dySEM_table\"). resulting base name automatically appended .rtf file extension. fileName relevant gtTab = TRUE writeTo specified.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputInvarCompTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","text":"list. specifically, tibble()—gtTab = FALSE (default)—gt::gt() object—gtTab = TRUE—model fit statistics model, well difference fit statistics model previous model","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputInvarCompTab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","text":"gtTab = TRUE writeTo specified, output simultaneously saved .rtf file user's specified directory. output file successfully saved, confirmation message printed console. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputInvarCompTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Model Fit of Nested Dyadic Invariance Models — outputInvarCompTab","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.residual.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = \"none\")  sat.intercept.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\"), constr_dy_struct = \"none\")  sat.loading.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\"), constr_dy_struct = \"none\")  sat.config.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\")  sat.residual.fit <- lavaan::cfa(sat.residual.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.intercept.fit <- lavaan::cfa(sat.intercept.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.loading.fit <- lavaan::cfa(sat.loading.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  sat.config.fit <- lavaan::cfa(sat.config.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  mods <- list(sat.residual.fit, sat.intercept.fit, sat.loading.fit, sat.config.fit)  outputInvarCompTab(mods, gtTab = TRUE, writeTo = tempdir(), fileName = \"dCFA_Invar\") #> Output stored in: /tmp/RtmpsLMzUg/dCFA_Invar.rtf     mod       chisq       df       pvalue       aic       bic       rmsea       cfi       chisq_diff       df_diff       p_diff       aic_diff       bic_diff       rmsea_diff       cfi_diff     residual 78.842 42 0.000 3855.175 3918.308 0.087 0.970 NA NA NA NA NA NA NAintercept 60.321 37 0.009 3846.654 3923.512 0.074 0.981 -18.521 -5 0.002 -8.521 5.204 -0.013 0.011loading 58.810 33 0.004 3853.143 3940.981 0.082 0.979 -1.511 -4 0.825 6.489 17.469 0.008 -0.002configural 53.026 29 0.004 3855.359 3954.176 0.085 0.981 -5.784 -4 0.216 2.216 13.196 0.002 0.001"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputModel.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","title":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","text":"function takes  model fitted dySEM() scripts exports table(s) /path diagram figure expected output.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","text":"","code":"outputModel(   dvn,   model = NULL,   fit,   table = TRUE,   tabletype = NULL,   figure = TRUE,   figtype = NULL,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","text":"dvn input dvn list scrapeVarCross model character input specifying type model output (e.g., \"cfa\", \"apim\", \"cfm\") fit input object fitted lavaan model table logical input whether table output desired. Default TRUE tabletype character input type table(s) () desired. options \"measurement\" (.e,, loadings, intercepts,), \"structural\" (.e., latent slopes, actor/partner effects, k parameters), \"\" (.e., measurement structural tables) figure logical input whether figure output desired. Default TRUE figtype character input type figure desired writeTo character string specifying directory path file(s) saved. set “.”, file(s) written current working directory. default NULL (throw error), examples use temporary directory created tempdir(). fileName character string specifying desired base name output file(s). fileName provided (.e., default fileName = NULL), defaults used (e.g., \"dySEM_table\"/\"dySEM_table_Measurement\"/\"dySEM_table_Structural tables; \"dySEM_figure\" figures). specified name automatically appended appropriate file extension (.e., .rtf tables; .png figures).","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","text":"Ignore console (prints unnecessary semPlot::semPaths details). importantly, prints word files table(s) /figure, outputted users working directory","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","text":"file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Exports Tables and/or SEM Diagrams based on dySEM models — outputModel","text":"","code":"dvnx <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.config.script <- scriptCFA(dvnx, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\")  sat.config.mod <- lavaan::cfa(sat.config.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputModel(dvnx, model = \"cfa\", fit = sat.config.mod, table = TRUE, tabletype = \"measurement\", figure = \"TRUE\", figtype = \"standardized\", writeTo = tempdir(), fileName = \"dCFA_configural\") #> Warning: `outputModel()` was deprecated in dySEM 1.1.0. #> ℹ Please use `dySEM::outputParamTab` and/or `dySEM::outputParamFig` instead. #> Output stored in /home/runner/work/dySEM/dySEM/docs/reference//tmp/RtmpsLMzUg/dCFA_configural std.png dvnxy <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\")  apim.indist.script <-  scriptAPIM(dvnxy, lvxname = \"Sat\", lvyname = \"Com\", est_k = TRUE)  apim.indist.mod <- lavaan::cfa(apim.indist.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputModel(dvnxy, model = \"apim\", fit = apim.indist.mod, table = TRUE, tabletype = \"measurement\", figure = \"TRUE\", figtype = \"standardized\", writeTo = tempdir(), fileName = \"APIM_indist\") #> Output stored in /home/runner/work/dySEM/dySEM/docs/reference//tmp/RtmpsLMzUg/APIM_indist std.png"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamFig.html","id":null,"dir":"Reference","previous_headings":"","what":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","title":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","text":"function takes model fitted dySEM scripts exports .png path diagram figures expected output.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamFig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","text":"","code":"outputParamFig(fit, figtype = NULL, writeTo = NULL, fileName = NULL)"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamFig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","text":"fit Input object fitted lavaan model. figtype character input type model desired: \"unstandardized\" unstandardized path coefficients. \"standardized\" standardized path coefficients. \"labels\" labelled parameters. writeTo character string specifying directory path output file path diagram saved. set “.”, file written current working directory. default NULL (throw error), examples use temporary directory created tempdir(). fileName character string specifying desired base name output file. fileName provided (.e., fileName = NULL), default used depending specified figtype (e.g., \"dySEM_figure unstd\", \"dySEM_figure std\", \"dySEM_figure lab\"). specified name automatically appended .png file extension.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamFig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","text":"qgraph object desired SEM path diagram, simultaneously exported .png file specified directory.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamFig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","text":"function uses semPlot::semPaths() create qgraph object desired SEM path diagram. execution, semPlot::semPaths() message printed console confirming directory path saved output file. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamFig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function That Exports SEM diagrams based on dySEM models — outputParamFig","text":"","code":"dvnx <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.config.script <- scriptCFA(dvnx, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\")  sat.config.mod <- lavaan::cfa(sat.config.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputParamFig(sat.config.mod, figtype = \"standardized\", writeTo = tempdir(), fileName = \"dCFA_configural\") #> Output stored in /home/runner/work/dySEM/dySEM/docs/reference//tmp/RtmpsLMzUg/dCFA_configural std.png   dvnxy <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\")  apim.indist.script <-  scriptAPIM(dvnxy, lvxname = \"Sat\", lvyname = \"Com\", est_k = TRUE)  apim.indist.mod <- lavaan::cfa(apim.indist.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputParamFig(apim.indist.mod, figtype = \"standardized\", writeTo = tempdir(), fileName = \"APIM_indist\") #> Output stored in /home/runner/work/dySEM/dySEM/docs/reference//tmp/RtmpsLMzUg/APIM_indist std.png"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamTab.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Exports Tables based on dySEM models — outputParamTab","title":"A Function That Exports Tables based on dySEM models — outputParamTab","text":"function takes model fitted dySEM scripts creates tables expected output /exports .rtfs.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Exports Tables based on dySEM models — outputParamTab","text":"","code":"outputParamTab(   dvn,   model = NULL,   fit,   tabletype = NULL,   gtTab = FALSE,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Exports Tables based on dySEM models — outputParamTab","text":"dvn Input dvn list scrapeVarCross() model character input specifying type model output: \"cfa\", \"bidyc\", \"apim\", \"mim\", \"cfm\", \"bidys\". fit input object fitted lavaan model. tabletype character input type table(s) () desired. Options \"measurement\" (.e., loadings, intercepts, etc.), \"structural\" (.e., latent slopes, actor/partner effects, k parameters), \"\" (.e., measurement structural tables). gtTab logical input indicating whether generate table(s) gt::gt() table object format (TRUE). default (FALSE), table(s) generated tibble::tibble() format. Users can also apply writeTo argument wish export gt:gt() table object(s). writeTo character string specifying directory path gt::gt() table object(s) saved. set \".\", file(s) written current working directory. default NULL, examples use temporary directory created tempdir(). writeTo relevant gtTab = TRUE. fileName character string specifying desired base name output gt::gt() file(s). fileName provided (.e., fileName = NULL), defaults used (e.g., \"dySEM_table\", \"dySEM_table_measurement\", \"dySEM_table_structural) based tabletype argument. resulting base name automatically appended .rtf file extension. fileName relevant gtTab = TRUE writeTo specified.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Exports Tables based on dySEM models — outputParamTab","text":"list. specifically, tibble() gtTab = FALSE (default), gt::gt() object gtTab = TRUE.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamTab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Function That Exports Tables based on dySEM models — outputParamTab","text":"gtTab = TRUE writeTo specified, output simultaneously saved .rtf file user's specified directory. output file(s) () successfully saved, confirmation message printed console. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/outputParamTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Exports Tables based on dySEM models — outputParamTab","text":"","code":"dvnx <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.config.script <- scriptCFA(dvnx, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\")  sat.config.mod <- lavaan::cfa(sat.config.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputParamTab(dvnx, model = \"cfa\", sat.config.mod, tabletype = \"measurement\", writeTo = tempdir(), fileName = \"dCFA_configural\") #> # A tibble: 10 × 8 #>    `Latent Factor` Indicator Loading    SE     Z `p-value` `Std. Loading` #>    <chr>           <chr>       <dbl> <dbl> <dbl> <chr>              <dbl> #>  1 Sat1            sat.g.1_1    2.11 0.158  13.3 < .001             0.937 #>  2 Sat1            sat.g.1_2    1.91 0.168  11.4 < .001             0.851 #>  3 Sat1            sat.g.1_3    2.10 0.161  13.1 < .001             0.926 #>  4 Sat1            sat.g.1_4    1.96 0.162  12.0 < .001             0.884 #>  5 Sat1            sat.g.1_5    1.87 0.179  10.4 < .001             0.806 #>  6 Sat2            sat.g.2_1    1.83 0.144  12.7 < .001             0.91  #>  7 Sat2            sat.g.2_2    1.84 0.146  12.7 < .001             0.908 #>  8 Sat2            sat.g.2_3    1.88 0.146  12.9 < .001             0.918 #>  9 Sat2            sat.g.2_4    1.61 0.151  10.7 < .001             0.819 #> 10 Sat2            sat.g.2_5    1.93 0.159  12.1 < .001             0.887 #> # ℹ 1 more variable: Intercept <dbl>   dvnxy <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\")  apim.indist.script <-  scriptAPIM(dvnxy, lvxname = \"Sat\", lvyname = \"Com\", est_k = TRUE)  apim.indist.mod <- lavaan::cfa(apim.indist.script, data = commitmentQ, std.lv = FALSE, auto.fix.first= FALSE, meanstructure = TRUE)  outputParamTab(dvnxy, model = \"cfa\", sat.config.mod, tabletype = \"measurement\", writeTo = tempdir(), fileName = \"APIM_indist\") #> NULL"},{"path":"https://jsakaluk.github.io/dySEM/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jsakaluk.github.io/dySEM/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"return value","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scrapeVarCross.html","id":null,"dir":"Reference","previous_headings":"","what":"A Variable Name-Scraping and Indexing Function for cross-sectional data — scrapeVarCross","title":"A Variable Name-Scraping and Indexing Function for cross-sectional data — scrapeVarCross","text":"function scrapes names indicator variables wide-format data set used dyadic analyses two latent variables (LV; X Y), indexes indicators correspond partner, LV. used primarily guide syntax-writing dySEM functions.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scrapeVarCross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Variable Name-Scraping and Indexing Function for cross-sectional data — scrapeVarCross","text":"","code":"scrapeVarCross(   dat,   x_order = \"spi\",   x_stem,   x_delim1 = NULL,   x_delim2 = NULL,   x_item_num = \"\\\\d+\",   distinguish_1 = \"1\",   distinguish_2 = \"2\",   y_order = NULL,   y_stem = NULL,   y_delim1 = NULL,   y_delim2 = NULL,   y_item_num = \"\\\\d+\",   covs_order = NULL,   covs_stem = NULL,   covs_delim1 = NULL,   covs_delim2 = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scrapeVarCross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Variable Name-Scraping and Indexing Function for cross-sectional data — scrapeVarCross","text":"dat input data frame indicators particular LV x_order input character order (S)tem, (P)artner number, ()tem number creating variable names. Defaults \"spi\" (Qualtrics-friendly) x_stem input character stem indicator variables LV X x_delim1 optional character separate stem partner number (spi) item number (sip) x_delim2 optional character separate stem/partner number (spi) stem/item number (sip) final element variable name x_item_num defaults scrape items match stem digits follow. updated allow particular range values, make sub-scale friendly. distinguish_1 input character used identifier first partner distinguish_2 input character used identifier first partner y_order optional character order (S)tem, (P)artner number, ()tem number creating variable names. Defaults \"spi\" (Qualtrics-friendly). Y-arguments necessary latent Y variable model y_stem optional input character stem indicator variables LV X y_delim1 optional character separate stem partner number (spi) item number (sip) y_delim2 optional character separate stem/partner number (spi) stem/item number (sip) final element variable name y_item_num defaults scrape items match stem digits follow. updated allow particular range values, make sub-scale friendly. covs_order optional character order (S)tem, (P)artner number, ()tem number covariate(s). Defaults NULL. covariate arguments necessary covariates scripted model(s). covs_stem optional input character stem(s) indicator variables covariate(s). Can accept single stem (e.g., \"anx\"), vector stems (e.g., c(\"anx\", \"dep\")). Defaults NULL. covs_delim1 optional character separate stem partner number (spi) item number (sip) covariate(s). Defaults NULL. covs_delim2 optional character separate stem/partner number (spi) stem/item number (sip) ","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scrapeVarCross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Variable Name-Scraping and Indexing Function for cross-sectional data — scrapeVarCross","text":"list, referred short-hand \"dvn\" (dyad variable names list) containing variable names p1, p2, # items per LV, characters distinguishing partners, total number indicators","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scrapeVarCross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Variable Name-Scraping and Indexing Function for cross-sectional data — scrapeVarCross","text":"","code":"dvnx <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\") dvnxy <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptAPIM.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Actor-Partner Interdependence Models (APIMs) — scriptAPIM","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Actor-Partner Interdependence Models (APIMs) — scriptAPIM","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax specifying Actor-Partner Interdependence Models (APIMs). Users can also invoke configural, loading, /intercept invariant measurement models, particular types structural comparisons.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptAPIM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Actor-Partner Interdependence Models (APIMs) — scriptAPIM","text":"","code":"scriptAPIM(   dvn,   scaleset = \"FF\",   lvxname,   lvyname,   constr_dy_x_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_x_struct = c(\"variances\", \"means\"),   constr_dy_y_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_y_struct = c(\"variances\", \"means\"),   constr_dy_xy_struct = c(\"actors\", \"partners\"),   model = lifecycle::deprecated(),   equate = lifecycle::deprecated(),   est_k = FALSE,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptAPIM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Actor-Partner Interdependence Models (APIMs) — scriptAPIM","text":"dvn input dvn list scrapeVarCross scaleset input character specify set scale latent variable(s). Default \"FF\" (fixed-factor; see Details rationale), user can specify \"MV\" (Marker Variable) lvxname input character (arbitrarily) name LV X lavaan syntax lvyname input character (arbitrarily) name LV Y lavaan syntax constr_dy_x_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_x_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_y_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_y_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_xy_struct input character vector detailing structural model parameters constrain modeling predictive association(s) partners' latent x y. Default c(\"actors\", \"partners\"), users can also specify \"\", \"actors_zero\", \"partners_zero\", \"none\". model Deprecated input character used specify level invariance modeled. Users rely upon constr_dy_x_meas/constr_dy_y_meas constr_dy_x_struct/constr_dy_y_struct instead, making constraints measurement /structural portions model latent x y. equate Deprecated input character specify type structural parameters constrained equivalency partners. Users rely upon constr_dy_xy_struct making constraints structural portion model associative relationship latent x y. est_k input logical whether Kenny & Ledermann's (2010) k parameter calculated characterize dyadic pattern APIM. Defaults FALSE, requires least loading-invariant model specified, otherwise warning returned. writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptAPIM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Actor-Partner Interdependence Models (APIMs) — scriptAPIM","text":"character object lavaan script can passed immediately lavaan functions. Users receive message structural comparisons specified recommended level invariance also specified. user supplies dvn containing X Y variables, alerted respecify dvn object.","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptAPIM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Actor-Partner Interdependence Models (APIMs) — scriptAPIM","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\") apim.script.indist <-  scriptAPIM(dvn, lvxname = \"Sat\", lvyname = \"Com\", est_k = TRUE, writeTo = tempdir(), fileName = \"latAPIM_indist\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptBiDy.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Bifactor Dyadic (BiDy) models — scriptBiDy","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Bifactor Dyadic (BiDy) models — scriptBiDy","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax specifying dyadic configural, loading, intercept invariant BiDy CFA (BiDy-C) SEM (BiDy-S) Model. Currently uses fixed-factor scale-setting","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptBiDy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Bifactor Dyadic (BiDy) models — scriptBiDy","text":"","code":"scriptBiDy(   dvn,   type = \"CFA\",   lvxname,   lvyname,   constr_dy_x_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_x_struct = c(\"variances\", \"means\"),   constr_dy_y_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_y_struct = c(\"variances\", \"means\"),   constr_dy_xy_struct = c(\"actors\"),   model = lifecycle::deprecated(),   equate = lifecycle::deprecated(),   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptBiDy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Bifactor Dyadic (BiDy) models — scriptBiDy","text":"dvn input dvn list scrapeVarCross type input character specify whether script BiDy-CFA (\"CFA\", default) BiDy-SEM (\"SEM\") model lvxname input character (arbitrarily) name LV X lavaan syntax lvyname input character (arbitrarily) name LV Y lavaan syntax constr_dy_x_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model. Users may also specify boutique patterns bifactor loading constraints \"loadings_source\" \"loadings_mutual\". constr_dy_x_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_y_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model. Users may also specify boutique patterns bifactor loading constraints \"loadings_source\" \"loadings_mutual\". constr_dy_y_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_xy_struct input character vector detailing structural model parameters constrain modeling predictive association(s) partners' latent x y. Default c(\"actors\"), users can also specify \"dyadic_zero\" \"none\". model Deprecated input character used specify level invariance modeled. Users rely upon constr_dy_x_meas/constr_dy_y_meas constr_dy_x_struct/constr_dy_y_struct instead, making constraints measurement /structural portions model latent x y. equate Deprecated input character specify type structural parameters constrained equivalency partners. Users rely upon constr_dy_xy_struct making constraints structural portion model associative relationship latent x y. writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptBiDy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Bifactor Dyadic (BiDy) models — scriptBiDy","text":"character object lavaan script can passed immediately lavaan functions","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptBiDy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Bifactor Dyadic (BiDy) models — scriptBiDy","text":"","code":"dvn <- scrapeVarCross(DRES, x_order = \"sip\", x_stem = \"sexsat\", x_delim2=\".\", distinguish_1=\"1\", distinguish_2=\"2\")  sexsat.bidyc.script <- scriptBiDy(dvn, lvxname = \"SexSat\", type = \"CFA\", writeTo = tempdir(), fileName = \"BiDy_C\")  dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\")  comsat.bidys.config.script <- scriptBiDy(dvn, lvxname = \"Sat\", lvyname = \"Com\", type = \"SEM\", writeTo = tempdir(), fileName = \"BiDy_S\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFA.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax specifying dyadic configural, loading, intercept invariant measurement models either specified X Y factor.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","text":"","code":"scriptCFA(   dvn,   scaleset = \"FF\",   lvname = \"X\",   constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_struct = c(\"variances\", \"means\"),   model = lifecycle::deprecated(),   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","text":"dvn input dvn list scrapeVarCross scaleset input character specify set scale latent variable(s). Default \"FF\" (fixed-factor; see Details rationale), user can specify \"MV\" (Marker Variable) lvname input character (arbitrarily) name LV lavaan syntax constr_dy_meas input character vector detailing measurement model parameters constrain across dyad members. Default c(\"loadings\", \"intercepts\", \"residuals\")(combination defaults constr_dy_struct, indistinguishable dyadic CFA), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_struct input character vector detailing structural model parameters constrain across dyad members. Default c(\"variances\", \"means\")(combination defaults constr_dy_meas, indistinguishable dyadic CFA), user can specify combination \"variances\" \"means\", \"none\". model Depreceated input character used specify level invariance modeled (\"configural\", \"loading\", \"intercept\", \"residual\", \"indist\"). Users rely upon constr_dy_meas constr_dy_struct instead, making constraints measurement /structural portions model. writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","text":"character object lavaan script can passed immediately lavaan functions","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","text":"default, many dySEM:: functions (including scriptCFA() default fixed-factor method scale-setting, whereby latent variance given factor constrained 1 partners configurally invariant #model, one variances freely estimated subsequent #models invariance testing sequence. selected default two reasons: (1) selection marker-variable usually arbitrary, yet can large influence estimation testing structural parameters (see https://stats.stackexchange.com/questions/402133/-cfa---matter--factor-loading--set--1/402732#402732); (2) selection non-invariant marker-variable can disastrous -stream consequences identification non-invariant measurement parameters, following rejection omnibus #invariance constraint set (see Lee, Preacher, & Little, 2011).","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Dyadic Confirmatory Factor Analysis (CFA) Models — scriptCFA","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.indist.script <- scriptCFA(dvn, lvname = \"Sat\")  sat.lvars.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = \"loadings\", constr_dy_struct = \"variances\")  sat.resids.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\", \"residuals\"), constr_dy_struct = \"none\", writeTo = tempdir(), fileName = \"dCFA_residual\")  sat.ints.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\", \"intercepts\"), constr_dy_struct = \"none\", writeTo = tempdir(), fileName = \"dCFA_intercept\")  sat.loads.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = c(\"loadings\"), constr_dy_struct = \"none\", writeTo = tempdir(), fileName = \"dCFA_loading\")  sat.config.script <- scriptCFA(dvn, lvname = \"Sat\", constr_dy_meas = \"none\", constr_dy_struct = \"none\", writeTo = tempdir(), fileName = \"dCFA_configural\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFM.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Common Fate Models (CFMs) — scriptCFM","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Common Fate Models (CFMs) — scriptCFM","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax specifying Common Fate Models (CFMs). Users can also invoke configural, loading, /intercept invariant measurement models, particular types structural comparisons.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Common Fate Models (CFMs) — scriptCFM","text":"","code":"scriptCFM(   dvn,   scaleset = \"FF\",   lvxname,   lvyname,   constr_dy_x_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_x_struct = c(\"variances\", \"means\"),   constr_dy_y_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_y_struct = c(\"variances\", \"means\"),   constr_dy_xy_struct = \"none\",   model = lifecycle::deprecated(),   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Common Fate Models (CFMs) — scriptCFM","text":"dvn input dvn list scrapeVarCross scaleset input character specify set scale latent variable(s). Default \"FF\" (fixed-factor; see Details rationale), user can specify \"MV\" (Marker Variable) lvxname input character (arbitrarily) name LV X lavaan syntax lvyname input character (arbitrarily) name LV Y lavaan syntax constr_dy_x_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_x_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_y_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_y_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_xy_struct input character vector detailing structural model parameters constrain modeling predictive association(s) partners' latent x y. Defaults \"none\". Options include \"p1_zero\" \"p2_zero\" (constrain within-person  latent residual covariances X Y zero), \"covar_zero\" (constrain within-person latent residual correlations zero), /\"dyadic_zero\" (constrain dyadic effect zero). model Deprecated input character used specify level invariance modeled. Users rely upon constr_dy_x_meas/constr_dy_y_meas constr_dy_x_struct/constr_dy_y_struct instead, making constraints measurement /structural portions model latent x y. writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Common Fate Models (CFMs) — scriptCFM","text":"character object lavaan script can passed immediately lavaan functions. Users receive message structural comparisons specified recommended level invariance also specified. user supplies dvn containing X Y variables, alerted respecify dvn object.","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptCFM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Common Fate Models (CFMs) — scriptCFM","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\") cfm.script.indist <-  scriptCFM(dvn, lvxname = \"Sat\", lvyname = \"Com\", writeTo = tempdir(), fileName = \"CFM_indist\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptDyEFA.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Dyadic Exploratory Factor Analysis (DEFA) Models — scriptDyEFA","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Dyadic Exploratory Factor Analysis (DEFA) Models — scriptDyEFA","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax specifying dyadic EFA model given number exploratory factors.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptDyEFA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Dyadic Exploratory Factor Analysis (DEFA) Models — scriptDyEFA","text":"","code":"scriptDyEFA(   dvn,   nFactor = 1,   constr_dy_meas = \"none\",   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptDyEFA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Dyadic Exploratory Factor Analysis (DEFA) Models — scriptDyEFA","text":"dvn input dvn list scrapeVarCross nFactor numeric argument number exploratory factors extract. Defaults 1. Note higher values may cause estimation problems solution becomes -factored /presence insufficient data. constr_dy_meas input character vector detailing measurement model parameters constrain across dyad members. Default \"none\" user can specify \"loadings\" /\"residuals\", fit exploratory model loadings /residuals constrained across partners writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptDyEFA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Dyadic Exploratory Factor Analysis (DEFA) Models — scriptDyEFA","text":"character object lavaan script can passed immediately lavaan functions","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptDyEFA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Dyadic Exploratory Factor Analysis (DEFA) Models — scriptDyEFA","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\")  sat.defa1.script <- scriptDyEFA(dvn, nFactor = 1,  writeTo = tempdir(), fileName = \"DEFA_1fac\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptINULL.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-NULL model for indistinguishable dyads — scriptINULL","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-NULL model for indistinguishable dyads — scriptINULL","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax -NULL model described Olsen & Kenny (2006)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptINULL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-NULL model for indistinguishable dyads — scriptINULL","text":"","code":"scriptINULL(   dvn,   lvxname = \"X\",   lvyname = NULL,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptINULL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-NULL model for indistinguishable dyads — scriptINULL","text":"dvn input dvn list scrapeVarCross lvxname input character (arbitrarily) name X LV lavaan syntax lvyname (optional) input character (arbitrarily) name Y LV lavaan syntax writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptINULL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-NULL model for indistinguishable dyads — scriptINULL","text":"character object lavaan script can passed immediately lavaan functions","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptINULL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-NULL model for indistinguishable dyads — scriptINULL","text":"","code":"dvn <- scrapeVarCross(dat = DRES, x_order = \"sip\", x_stem = \"PRQC\", x_delim1 = \"_\", x_delim2=\".\", x_item_num=\"\\\\d+\", distinguish_1=\"1\", distinguish_2=\"2\") qual.inull.script <- scriptINULL(dvn, lvxname = \"Qual\", writeTo = tempdir(), fileName = \"I-NULL_script\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptISAT.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-SAT model for indistinguishable dyads — scriptISAT","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-SAT model for indistinguishable dyads — scriptISAT","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax -SAT model described Olsen & Kenny (2006)","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptISAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-SAT model for indistinguishable dyads — scriptISAT","text":"","code":"scriptISAT(dvn, lvxname = \"X\", lvyname = NULL, writeTo = NULL, fileName = NULL)"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptISAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-SAT model for indistinguishable dyads — scriptISAT","text":"dvn input dvn list scrapeVarCross lvxname input character (arbitrarily) name X LV lavaan syntax lvyname (optional) input character (arbitrarily) name X LV lavaan syntax writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptISAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-SAT model for indistinguishable dyads — scriptISAT","text":"character object lavaan script can passed immediately lavaan functions","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptISAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting the I-SAT model for indistinguishable dyads — scriptISAT","text":"","code":"dvn <- scrapeVarCross(dat = DRES, x_order = \"sip\", x_stem = \"PRQC\", x_delim1 = \"_\", x_delim2=\".\", x_item_num=\"\\\\d+\", distinguish_1=\"1\", distinguish_2=\"2\")  qual.isat.script <- scriptISAT(dvn, lvxname = \"Qual\", writeTo = tempdir(), fileName = \"I-SAT_script\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptMIM.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Mutual influence Model — scriptMIM","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Mutual influence Model — scriptMIM","text":"function takes outputted object scrapeVarCross() automatically writes, returns, exports (.txt) lavaan() syntax specifying Mutual Influence Models (MIMs). Users can also invoke configural, loading, /intercept invariant measurement models, particular types structural comparisons.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptMIM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Mutual influence Model — scriptMIM","text":"","code":"scriptMIM(   dvn,   scaleset = \"FF\",   lvxname,   lvyname,   constr_dy_x_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_x_struct = c(\"variances\", \"means\"),   constr_dy_y_meas = c(\"loadings\", \"intercepts\", \"residuals\"),   constr_dy_y_struct = c(\"variances\", \"means\"),   constr_dy_xy_struct = c(\"actors\", \"partners\"),   model = lifecycle::deprecated(),   equate = lifecycle::deprecated(),   est_k = FALSE,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptMIM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Mutual influence Model — scriptMIM","text":"dvn input dvn list scrapeVarCross scaleset input character specify set scale latent variable(s). Default \"FF\" (fixed-factor; see Details rationale), user can specify \"MV\" (Marker Variable) lvxname input character (arbitrarily) name LV X lavaan syntax lvyname input character (arbitrarily) name LV Y lavaan syntax constr_dy_x_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_x_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_y_meas input character vector detailing measurement model parameters constrain across dyad members latent X. Default c(\"loadings\", \"intercepts\", \"residuals\"), user can specify combination \"loadings\", \"intercepts\", \"residuals\", #\"none\" specify otherwise unconstrained dyadic configural invariance model constr_dy_y_struct input character vector detailing structural model parameters constrain across dyad members latent X. Default c(\"variances\", \"means\"), user can specify combination \"variances\" \"means\", \"none\". constr_dy_xy_struct input character vector detailing structural model parameters constrain modeling predictive association(s) partners' latent x y. Default c(\"actors\", \"partners\"), users can also specify \"\", \"actors_zero\", \"partners_zero\", \"none\". model Deprecated input character used specify level invariance modeled. Users rely upon constr_dy_x_meas/constr_dy_y_meas constr_dy_x_struct/constr_dy_y_struct instead, making constraints measurement /structural portions model latent x y. equate Deprecated input character specify type structural parameters constrained equivalency partners. Users rely upon constr_dy_xy_struct making constraints structural portion model associative relationship latent x y. est_k input logical whether Kenny & Ledermann's (2010) k parameter calculated characterize dyadic pattern APIM. Defaults FALSE, requires least loading-invariant model specified, otherwise warning returned. writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptMIM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Mutual influence Model — scriptMIM","text":"character object lavaan script can passed immediately lavaan functions. Users receive message structural comparisons specified recommended level invariance also specified. user supplies dvn containing X Y variables, alerted respecify dvn object.","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptMIM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Latent Mutual influence Model — scriptMIM","text":"","code":"dvn <- scrapeVarCross(dat = commitmentQ, x_order = \"spi\", x_stem = \"sat.g\", x_delim1 = \".\", x_delim2=\"_\", distinguish_1=\"1\", distinguish_2=\"2\", y_order=\"spi\", y_stem=\"com\", y_delim1 = \".\", y_delim2=\"_\")  mim.script.indist <- scriptMIM(dvn, lvxname = \"Sat\", lvyname = \"Com\", est_k = TRUE, writeTo = tempdir(), fileName = \"MIM_indist\")"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptObsAPIM.html","id":null,"dir":"Reference","previous_headings":"","what":"A Function That Writes, Saves, and Exports Syntax for Fitting Observed Actor-Partner Interdependence Models — scriptObsAPIM","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Observed Actor-Partner Interdependence Models — scriptObsAPIM","text":"Function Writes, Saves, Exports Syntax Fitting Observed Actor-Partner Interdependence Models","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptObsAPIM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Observed Actor-Partner Interdependence Models — scriptObsAPIM","text":"","code":"scriptObsAPIM(   X1 = NULL,   Y1 = NULL,   X2 = NULL,   Y2 = NULL,   equate = \"none\",   k = FALSE,   writeTo = NULL,   fileName = NULL )"},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptObsAPIM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Observed Actor-Partner Interdependence Models — scriptObsAPIM","text":"X1 character vector name containing X variable/composite partner 1 Y1 character vector name containing Y variable/composite partner 1 X2 character vector name containing X variable/composite partner 2 Y2 character vector name containing Y variable/composite partner 2 equate character parameter(s) constrain (\"actor\", \"partner\", \"\"); default \"none\" (freely estimated) k input logical whether Kenny & Ledermann's (2010) k parameter calculated characterize dyadic pattern APIM. Default FALSE writeTo character string specifying directory path .txt file resulting lavaan script written. set “.”, .txt file written current working directory. default NULL, examples use temporary directory created tempdir(). fileName character string specifying desired base name .txt output file. default NULL. specified name automatically appended .txt file extension. file name already exists user's chosen directory, overwritten.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptObsAPIM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Observed Actor-Partner Interdependence Models — scriptObsAPIM","text":"character object lavaan script can passed immediately lavaan functions.","code":""},{"path":"https://jsakaluk.github.io/dySEM/reference/scriptObsAPIM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Function That Writes, Saves, and Exports Syntax for Fitting Observed Actor-Partner Interdependence Models — scriptObsAPIM","text":"","code":"obsAPIMScript <- scriptObsAPIM (X1 = \"SexSatA\", Y1 = \"RelSatA\", X2 = \"SexSatB\", Y2 = \"RelSatB\", equate = \"none\", writeTo = tempdir(), fileName = \"obsAPIM_script\")"},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"dysem-111","dir":"Changelog","previous_headings":"","what":"dySEM 1.1.1","title":"dySEM 1.1.1","text":"revamping outputting functionality, lead @omarjcamanto","code":""},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"major-changes-1-1-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"dySEM 1.1.1","text":"Deprecated outputModel(), favour two separate functions: outputParamFig() (path diagram), outputParamTab() (table parameter estimates) Deprecated getInvarCompTable(), favour outputInvarCompTable() (table invariance comparisons); now returns flexible data frame (optionality gt()) Created outputContraintTests() (table parameter-specific dyadic noninvariance tests Langrange multipliers); now returns flexible tibble (optionality gt())","code":""},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"dysem-110","dir":"Changelog","previous_headings":"","what":"dySEM 1.1.0","title":"dySEM 1.1.0","text":"Added basic dyadic EFA functionality (simulations forthcoming), including scripters, model fitting comparison sequence wrapper, unit tests","code":""},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"dysem-100","dir":"Changelog","previous_headings":"","what":"dySEM 1.0.0","title":"dySEM 1.0.0","text":"CRAN release: 2024-03-15 Marks first release dySEM CRAN. , NEWS.md file updated new release.","code":""},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"dySEM 1.0.0","text":"Implemented new style arguments constraints measurement model (e.g., constr_dy_x_meas) structural model (e.g., constr_dy_x_struct) scripters, order make addition arguments design-based constraints (e.g., groups, waves assessment) easier future releases. arguments replace previous model equate arguments scripters (deprecated) default constrained (.e., indistinguishable) version model scripted.","code":""},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"major-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"dySEM 1.0.0","text":"@omarjcamanto joins dySEM team co-author! Omar major contributor dySEM project Fall 2023 semester, excited board moving forward. now unit tests! coverage taken hit switch new arguments constraints, critical mass tests place scrapeVarCross(), scriptCFA() scriptAPIM(), scriptHelpers underlying . scriptCFA() scriptAPIM(), specific tests ensuring appropriate number estimated parameters dfs, equivalent model fit FF MV scale-setting versions (thanks @omarjcamanto work ). continue add tests functions future releases, well vignette explaining use number estimated parameters dfs, model fit indexes unit tests quality assurance dySEM’s model specification. added two new user-facing wrapper functions: getContraintTests() (help insights items driving dyadic noninvariance), getInvarCompTable() (facilitates parsimony-favouring inclusive “build-” invariance testing sequence, beginning constrained model relaxing constraints step-wise fashion).","code":""},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"minor-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"dySEM 1.0.0","text":"made number updates documentation vignettes, order bring line BREAKING Major changes release.","code":""},{"path":[]},{"path":"https://jsakaluk.github.io/dySEM/news/index.html","id":"dysem-0009000","dir":"Changelog","previous_headings":"","what":"dySEM 0.0.0.9000","title":"dySEM 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
