% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/outputModel.R
\name{outputModel}
\alias{outputModel}
\title{A Function That Exports Tables and/or SEM Digrams based on dySEM models}
\usage{
outputModel(
  dvn,
  model = NULL,
  fit,
  table = TRUE,
  tabletype = NULL,
  figure = TRUE,
  figtype = NULL
)
}
\arguments{
\item{dvn}{input dvn list from scrapeVarCross}

\item{model}{character input specying type of model to output (e.g., "cfa", "apim", "cfm")}

\item{fit}{input object from fitted lavaan model}

\item{table}{logical input of whether table output is desired. Default is TRUE}

\item{tabletype}{character input of what type of table(s) is(are) desired.
options are "measurement" (i.e,, loadings, intercepts,),
"structural" (i.e., latent slopes, such as actor/partner effects, k parameters), or "both"
(i.e., both measurement and structural tables)}

\item{figure}{logical input of whether figure output is desired. Default is TRUE}

\item{figtype}{character input of what type of figure is desired.}
}
\value{
Ignore console (prints unneccessary semPlot::semPaths details). More importantly,
prints word files for the table(s) and/or figure, outputed to the users working directory
}
\description{
This function takes the  model from fitted dySEM() scripts and
exports table(s) and/or a path diagram figure of expected output.
}
\examples{
dvnx <- scrapeVarCross(dat = commitmentQ, x_order = "spi", x_stem = "sat.g", x_delim1 = ".", x_delim2="_", distinguish_1="1", distinguish_2="2")
sat.config.script <-  scriptCFA(dvnx, lvname = "Sat", model = "configural")
sat.config.mod <- cfa(sat.config.script, data = commitmentQ, std.lv = F, auto.fix.first= F, meanstructure = T)
outputModel(dvnx, model = "cfa", fit = sat.config.mod, table = TRUE, tabletype = "measurement", figure = "TRUE", figtype = "standardized")
dvnxy <- scrapeVarCross(dat = commitmentQ, x_order = "spi", x_stem = "sat.g", x_delim1 = ".", x_delim2="_", distinguish_1="1", distinguish_2="2",
y_order="spi", y_stem="com", y_delim1 = ".", y_delim2="_")
apim.script.config <-  scriptAPIM(dvnxy, lvxname = "Sat", lvyname = "Com", model = "configural")
apim.config.fit <- cfa(apim.script.config, data = commitmentQ, std.lv = F, auto.fix.first= F, meanstructure = T)
outputModel(dvnxy, model = "apim", fit = apim.config.fit, table = TRUE, tabletype = "measurement", figure = "TRUE", figtype = "standardized")
}
